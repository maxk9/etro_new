
M19U6PCH1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001822  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00001822  000018b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000136  00800092  00800092  000018e8  2**0
                  ALLOC
  3 .noinit       00000000  008001c8  008001c8  000018e8  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000018e8  2**0
                  CONTENTS
  5 .debug_aranges 00000014  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000819  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000105b  00000000  00000000  00002115  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000017c  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014b7  00000000  00000000  000032ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d5  00000000  00000000  000047a3  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c0       	rjmp	.+104    	; 0x6a
       2:	4d c0       	rjmp	.+154    	; 0x9e
       4:	4c c0       	rjmp	.+152    	; 0x9e
       6:	4b c0       	rjmp	.+150    	; 0x9e
       8:	4a c0       	rjmp	.+148    	; 0x9e
       a:	49 c0       	rjmp	.+146    	; 0x9e
       c:	48 c0       	rjmp	.+144    	; 0x9e
       e:	47 c0       	rjmp	.+142    	; 0x9e
      10:	ea ca       	rjmp	.-2604   	; 0xfffff5e6
      12:	45 c0       	rjmp	.+138    	; 0x9e
      14:	44 c0       	rjmp	.+136    	; 0x9e
      16:	ce cb       	rjmp	.-2148   	; 0xfffff7b4
      18:	42 c0       	rjmp	.+132    	; 0x9e
      1a:	41 c0       	rjmp	.+130    	; 0x9e
      1c:	7d ca       	rjmp	.-2822   	; 0xfffff518
      1e:	3f c0       	rjmp	.+126    	; 0x9e
      20:	3e c0       	rjmp	.+124    	; 0x9e
      22:	3d c0       	rjmp	.+122    	; 0x9e
      24:	3c c0       	rjmp	.+120    	; 0x9e
      26:	3b c0       	rjmp	.+118    	; 0x9e
      28:	3a c0       	rjmp	.+116    	; 0x9e

0000002a <__ctors_end>:
      2a:	e7 c4       	rjmp	.+2510   	; 0x9fa
      2c:	09 c5       	rjmp	.+2578   	; 0xa40
      2e:	2a c5       	rjmp	.+2644   	; 0xa84
      30:	42 c5       	rjmp	.+2692   	; 0xab6
      32:	4f c5       	rjmp	.+2718   	; 0xad2
      34:	5a c5       	rjmp	.+2740   	; 0xaea
      36:	6a c5       	rjmp	.+2772   	; 0xb0c
      38:	b1 c4       	rjmp	.+2402   	; 0x99c
      3a:	24 c6       	rjmp	.+3144   	; 0xc84
      3c:	44 c6       	rjmp	.+3208   	; 0xcc6
      3e:	67 c6       	rjmp	.+3278   	; 0xd0e
      40:	7d c6       	rjmp	.+3322   	; 0xd3c
      42:	86 c6       	rjmp	.+3340   	; 0xd50
      44:	8c c6       	rjmp	.+3352   	; 0xd5e
      46:	98 c6       	rjmp	.+3376   	; 0xd78
      48:	bf c5       	rjmp	.+2942   	; 0xbc8
      4a:	28 c7       	rjmp	.+3664   	; 0xe9c
      4c:	2e c7       	rjmp	.+3676   	; 0xeaa
      4e:	30 c7       	rjmp	.+3680   	; 0xeb0
      50:	22 c7       	rjmp	.+3652   	; 0xe96
      52:	22 c7       	rjmp	.+3652   	; 0xe98
      54:	f2 c6       	rjmp	.+3556   	; 0xe3a
      56:	f1 c6       	rjmp	.+3554   	; 0xe3a
      58:	c8 c6       	rjmp	.+3472   	; 0xdea
      5a:	82 c7       	rjmp	.+3844   	; 0xf60
      5c:	88 c7       	rjmp	.+3856   	; 0xf6e
      5e:	8a c7       	rjmp	.+3860   	; 0xf74
      60:	7c c7       	rjmp	.+3832   	; 0xf5a
      62:	7c c7       	rjmp	.+3832   	; 0xf5c
      64:	75 c7       	rjmp	.+3818   	; 0xf50
      66:	74 c7       	rjmp	.+3816   	; 0xf50
      68:	40 c7       	rjmp	.+3712   	; 0xeea

0000006a <__init>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf e5       	ldi	r28, 0x5F	; 95
      70:	d2 e0       	ldi	r29, 0x02	; 2
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	e2 e2       	ldi	r30, 0x22	; 34
      7e:	f8 e1       	ldi	r31, 0x18	; 24
      80:	02 c0       	rjmp	.+4      	; 0x86

00000082 <.do_copy_data_loop>:
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0

00000086 <.do_copy_data_start>:
      86:	a2 39       	cpi	r26, 0x92	; 146
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82

0000008c <__do_clear_bss>:
      8c:	11 e0       	ldi	r17, 0x01	; 1
      8e:	a2 e9       	ldi	r26, 0x92	; 146
      90:	b0 e0       	ldi	r27, 0x00	; 0
      92:	01 c0       	rjmp	.+2      	; 0x96

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a8 3c       	cpi	r26, 0xC8	; 200
      98:	b1 07       	cpc	r27, r17
      9a:	e1 f7       	brne	.-8      	; 0x94
      9c:	92 c8       	rjmp	.-3804   	; 0xfffff1c2

0000009e <__bad_interrupt>:
      9e:	b0 cf       	rjmp	.-160    	; 0x0

000000a0 <ResetErrorLinkRS>:

 	void	ResetErrorLinkRS(void)
{
	unsigned char R0;
	R0=UDR;//UDR1;
      a0:	8c b1       	in	r24, 0x0c	; 12
	UCSRA &=0x22;//reset error
      a2:	8b b1       	in	r24, 0x0b	; 11
      a4:	82 72       	andi	r24, 0x22	; 34
      a6:	8b b9       	out	0x0b, r24	; 11


	CtReceiveRS=CtReceiveRS0;
      a8:	87 e0       	ldi	r24, 0x07	; 7
      aa:	80 93 bd 00 	sts	0x00BD, r24
      ae:	08 95       	ret

000000b0 <InitUsart>:
}
 	void	InitUsart(void)
	{	
	unsigned char R0;
   UCSRA=2;//двойная скорость
      b0:	82 e0       	ldi	r24, 0x02	; 2
      b2:	8b b9       	out	0x0b, r24	; 11
   UCSRA |=1;//only 9bit=1
      b4:	58 9a       	sbi	0x0b, 0	; 11
   UCSRB=0x1c;//enable transmit 9bit
      b6:	8c e1       	ldi	r24, 0x1C	; 28
      b8:	8a b9       	out	0x0a, r24	; 10
   UBRRH=0;
      ba:	10 bc       	out	0x20, r1	; 32
   UBRRL=207;
      bc:	8f ec       	ldi	r24, 0xCF	; 207
      be:	89 b9       	out	0x09, r24	; 9
	R0=0x86;
	UCSRC=R0;
      c0:	86 e8       	ldi	r24, 0x86	; 134
      c2:	80 bd       	out	0x20, r24	; 32

   UCSRB |=0x80;//enable int receive
      c4:	57 9a       	sbi	0x0a, 7	; 10
   PORTD &=0xf7;//Out Transmit=off
      c6:	93 98       	cbi	0x12, 3	; 18
      c8:	08 95       	ret

000000ca <TransmitUsart>:


	}	
	void	TransmitUsart(void)
	{
	unsigned int R0;
++TestRS;
      ca:	80 91 a6 00 	lds	r24, 0x00A6
      ce:	8f 5f       	subi	r24, 0xFF	; 255
      d0:	80 93 a6 00 	sts	0x00A6, r24
   PORTD |=0x8;//Out Transmit=on prov
      d4:	93 9a       	sbi	0x12, 3	; 18
   R0=1000;
      d6:	88 ee       	ldi	r24, 0xE8	; 232
      d8:	93 e0       	ldi	r25, 0x03	; 3
   while(R0)
   --R0;
      da:	c2 97       	sbiw	r24, 0x32	; 50
      dc:	f1 f7       	brne	.-4      	; 0xda
     while(!(UCSRA & 0x20))
   _WDR();
      de:	5d 99       	sbic	0x0b, 5	; 11
      e0:	03 c0       	rjmp	.+6      	; 0xe8
      e2:	a8 95       	wdr
      e4:	5d 9b       	sbis	0x0b, 5	; 11
      e6:	fd cf       	rjmp	.-6      	; 0xe2
/*	if(NumberLinkRS)
	--NumberLinkRS;
	else
	NumberLinkRS=5;*/
	NumberLinkRS=1;
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	80 93 13 01 	sts	0x0113, r24
   UCSRB |=1;//9 bit=1
      ee:	50 9a       	sbi	0x0a, 0	; 10

    UDR=NumberBlok;//LinkRS;
      f0:	80 91 b9 00 	lds	r24, 0x00B9
      f4:	8c b9       	out	0x0c, r24	; 12
	ControlTransmitRS =NumberBlok;
      f6:	80 93 a9 00 	sts	0x00A9, r24
	UCSRA |=1;//Receive only 9 bit=1
      fa:	58 9a       	sbi	0x0b, 0	; 11
      fc:	08 95       	ret

000000fe <LinkPult>:


			
	}		  

	void	LinkPult(void)
{

	unsigned char R0;
	unsigned char R1;
	unsigned char R2;
	unsigned char R3;
	unsigned char R4;

	if(UCSRA &(1<<RXC))
      fe:	5f 9b       	sbis	0x0b, 7	; 11
     100:	08 95       	ret
	{

	R1=UCSRA;
     102:	2b b1       	in	r18, 0x0b	; 11
	R2=UCSRB;
     104:	9a b1       	in	r25, 0x0a	; 10
	R3=UCSRC;
     106:	80 b5       	in	r24, 0x20	; 32
	R0=UDR;
     108:	3c b1       	in	r19, 0x0c	; 12
	RamReceiveRS[CtReceiveRS]=R0;
     10a:	80 91 bd 00 	lds	r24, 0x00BD
     10e:	e8 2f       	mov	r30, r24
     110:	ff 27       	eor	r31, r31
     112:	e8 5d       	subi	r30, 0xD8	; 216
     114:	fe 4f       	sbci	r31, 0xFE	; 254
     116:	30 83       	st	Z, r19
	if(R2 & 2)
     118:	91 ff       	sbrs	r25, 1
     11a:	2e c0       	rjmp	.+92     	; 0x178
		{
	NumberReceiveRS=R0;
     11c:	30 93 ce 00 	sts	0x00CE, r19
	if(NumberBlok>NumberReceiveRS)
     120:	20 91 b9 00 	lds	r18, 0x00B9
     124:	32 17       	cp	r19, r18
     126:	08 f0       	brcs	.+2      	; 0x12a
     128:	50 c0       	rjmp	.+160    	; 0x1ca
			{
	R4=NumberBlok-NumberReceiveRS;
     12a:	92 2f       	mov	r25, r18
     12c:	93 1b       	sub	r25, r19
	CtUsart=R4;
			}
	else
			{
	R4=NumberBlok-NumberReceiveRS;
	CtUsart=R4+7;
     12e:	90 93 92 01 	sts	0x0192, r25
			}

	ControlReceiveRS =R0;
     132:	30 93 89 01 	sts	0x0189, r19
	CtReceiveRS=CtReceiveRS0-1;
     136:	86 e0       	ldi	r24, 0x06	; 6
     138:	80 93 bd 00 	sts	0x00BD, r24
	UCSRA &=0xfe;
     13c:	58 98       	cbi	0x0b, 0	; 11
	UCSRB &=0xfe;
     13e:	50 98       	cbi	0x0a, 0	; 10
	if(NumberReceiveRS==NumberBlok)
     140:	32 17       	cp	r19, r18
     142:	f1 f6       	brne	.-68     	; 0x100
			{
     while(!(UCSRA & 0x20))
   _WDR();
     144:	5d 99       	sbic	0x0b, 5	; 11
     146:	03 c0       	rjmp	.+6      	; 0x14e
     148:	a8 95       	wdr
     14a:	5d 9b       	sbis	0x0b, 5	; 11
     14c:	fd cf       	rjmp	.-6      	; 0x148

    UDR=RegTransmitRS[CtReceiveRS];
	ControlTransmitRS +=RegTransmitRS[CtReceiveRS];
			}
	return;
		}

	if(R1 & 0x1c)//error
		{


	ResetErrorLinkRS();
	return;
		}
	if(CtReceiveRS)
		{	
	ControlReceiveRS +=R0;
	--CtReceiveRS;
	if(NumberReceiveRS==NumberBlok)
			{

     while(!(UCSRA & 0x20))
   _WDR();
   if(!CtReceiveRS)
    UDR=ControlTransmitRS;
	else
				{
    UDR=RegTransmitRS[CtReceiveRS];
     14e:	80 91 bd 00 	lds	r24, 0x00BD
     152:	e8 2f       	mov	r30, r24
     154:	ff 27       	eor	r31, r31
     156:	ef 5d       	subi	r30, 0xDF	; 223
     158:	fe 4f       	sbci	r31, 0xFE	; 254
     15a:	80 81       	ld	r24, Z
     15c:	8c b9       	out	0x0c, r24	; 12
	ControlTransmitRS +=RegTransmitRS[CtReceiveRS];
     15e:	80 91 bd 00 	lds	r24, 0x00BD
     162:	e8 2f       	mov	r30, r24
     164:	ff 27       	eor	r31, r31
     166:	ef 5d       	subi	r30, 0xDF	; 223
     168:	fe 4f       	sbci	r31, 0xFE	; 254
     16a:	80 81       	ld	r24, Z
     16c:	90 91 a9 00 	lds	r25, 0x00A9
     170:	89 0f       	add	r24, r25
     172:	80 93 a9 00 	sts	0x00A9, r24
     176:	08 95       	ret
     178:	82 2f       	mov	r24, r18
     17a:	99 27       	eor	r25, r25
     17c:	8c 71       	andi	r24, 0x1C	; 28
     17e:	90 70       	andi	r25, 0x00	; 0
     180:	89 2b       	or	r24, r25
     182:	09 f0       	breq	.+2      	; 0x186
     184:	4f c0       	rjmp	.+158    	; 0x224
     186:	80 91 bd 00 	lds	r24, 0x00BD
     18a:	88 23       	and	r24, r24
     18c:	11 f1       	breq	.+68     	; 0x1d2
     18e:	80 91 89 01 	lds	r24, 0x0189
     192:	83 0f       	add	r24, r19
     194:	80 93 89 01 	sts	0x0189, r24
     198:	80 91 bd 00 	lds	r24, 0x00BD
     19c:	81 50       	subi	r24, 0x01	; 1
     19e:	80 93 bd 00 	sts	0x00BD, r24
     1a2:	90 91 ce 00 	lds	r25, 0x00CE
     1a6:	80 91 b9 00 	lds	r24, 0x00B9
     1aa:	98 17       	cp	r25, r24
     1ac:	09 f0       	breq	.+2      	; 0x1b0
     1ae:	a8 cf       	rjmp	.-176    	; 0x100
     1b0:	5d 99       	sbic	0x0b, 5	; 11
     1b2:	03 c0       	rjmp	.+6      	; 0x1ba
     1b4:	a8 95       	wdr
     1b6:	5d 9b       	sbis	0x0b, 5	; 11
     1b8:	fd cf       	rjmp	.-6      	; 0x1b4
     1ba:	80 91 bd 00 	lds	r24, 0x00BD
     1be:	88 23       	and	r24, r24
     1c0:	31 f6       	brne	.-116    	; 0x14e
     1c2:	80 91 a9 00 	lds	r24, 0x00A9
     1c6:	8c b9       	out	0x0c, r24	; 12
     1c8:	08 95       	ret
     1ca:	92 2f       	mov	r25, r18
     1cc:	93 1b       	sub	r25, r19
     1ce:	99 5f       	subi	r25, 0xF9	; 249
     1d0:	ae cf       	rjmp	.-164    	; 0x12e
				}
			}
		}
	else
		{


	PORTD &= 0xf7;//Transmit denable
     1d2:	93 98       	cbi	0x12, 3	; 18
	if(R0==ControlReceiveRS)
     1d4:	80 91 89 01 	lds	r24, 0x0189
     1d8:	38 17       	cp	r19, r24
     1da:	09 f0       	breq	.+2      	; 0x1de
     1dc:	91 cf       	rjmp	.-222    	; 0x100
					{
	CtErrorFar[NumberReceiveRS]=50;
     1de:	40 91 ce 00 	lds	r20, 0x00CE
     1e2:	24 2f       	mov	r18, r20
     1e4:	33 27       	eor	r19, r19
     1e6:	f9 01       	movw	r30, r18
     1e8:	e9 5f       	subi	r30, 0xF9	; 249
     1ea:	fe 4f       	sbci	r31, 0xFE	; 254
     1ec:	82 e3       	ldi	r24, 0x32	; 50
     1ee:	80 83       	st	Z, r24
	CtErrorRS=10;
     1f0:	8a e0       	ldi	r24, 0x0A	; 10
     1f2:	80 93 46 01 	sts	0x0146, r24
     1f6:	f9 01       	movw	r30, r18
     1f8:	e8 52       	subi	r30, 0x28	; 40
     1fa:	ff 4f       	sbci	r31, 0xFF	; 255
     1fc:	a9 e2       	ldi	r26, 0x29	; 41
     1fe:	b1 e0       	ldi	r27, 0x01	; 1
     200:	95 e0       	ldi	r25, 0x05	; 5

	for(R4=1;R4<=6;++R4)
	RomReceiveRS[R4][NumberReceiveRS]=RamReceiveRS[R4];
     202:	8d 91       	ld	r24, X+
     204:	80 83       	st	Z, r24
     206:	37 96       	adiw	r30, 0x07	; 7
     208:	91 50       	subi	r25, 0x01	; 1
     20a:	97 ff       	sbrs	r25, 7
     20c:	fa cf       	rjmp	.-12     	; 0x202
	R4=NumberReceiveRS;
     20e:	94 2f       	mov	r25, r20
	if(R4<=5)
     210:	46 30       	cpi	r20, 0x06	; 6
     212:	50 f4       	brcc	.+20     	; 0x228
	++R4;
     214:	9f 5f       	subi	r25, 0xFF	; 255
	else
	R4=0;
	if(R4==NumberBlok)
     216:	80 91 b9 00 	lds	r24, 0x00B9
     21a:	98 17       	cp	r25, r24
     21c:	09 f0       	breq	.+2      	; 0x220
     21e:	70 cf       	rjmp	.-288    	; 0x100
	TransmitUsart();
     220:	54 df       	rcall	.-344    	; 0xca
     222:	08 95       	ret
     224:	3d df       	rcall	.-390    	; 0xa0
     226:	08 95       	ret
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	f5 cf       	rjmp	.-22     	; 0x216
     22c:	08 95       	ret

0000022e <ReadKn>:

					}
		}

	}
}

 
void    ReadKn(void)
    {

    unsigned    char Reg2;
    Reg2=0;
     22e:	90 e0       	ldi	r25, 0x00	; 0
    if(bit_is_clear(PINB,PB0))
     230:	b0 9b       	sbis	0x16, 0	; 22
    Reg2=Reg2 | 1;
     232:	91 e0       	ldi	r25, 0x01	; 1

    if(bit_is_clear(PINB,PB1))
     234:	b1 9b       	sbis	0x16, 1	; 22
    Reg2=Reg2 | 2;
     236:	92 60       	ori	r25, 0x02	; 2

    if(bit_is_clear(PINB,PB2))
     238:	b2 9b       	sbis	0x16, 2	; 22
    Reg2=Reg2 | 4;
     23a:	94 60       	ori	r25, 0x04	; 4

    if(bit_is_clear(PINB,PB3))
     23c:	b3 9b       	sbis	0x16, 3	; 22
    Reg2=Reg2 | 8;
     23e:	98 60       	ori	r25, 0x08	; 8

    if(bit_is_clear(PIND,PD6))
     240:	86 9b       	sbis	0x10, 6	; 16
    Reg2=Reg2 | 0x10;
     242:	90 61       	ori	r25, 0x10	; 16

    if(bit_is_clear(PIND,PD2))
     244:	82 9b       	sbis	0x10, 2	; 16
    Reg2=Reg2 | 0x20;
     246:	90 62       	ori	r25, 0x20	; 32

    if(bit_is_clear(PIND,PD4))
     248:	84 9b       	sbis	0x10, 4	; 16
    Reg2=Reg2 | 0x40;
     24a:	90 64       	ori	r25, 0x40	; 64



    if(Reg2==RegSTemp)
     24c:	80 91 97 00 	lds	r24, 0x0097
     250:	98 17       	cp	r25, r24
     252:	11 f4       	brne	.+4      	; 0x258
		{

    RegS=Reg2;
     254:	90 93 39 01 	sts	0x0139, r25
		}
    RegSTemp=Reg2;
     258:	90 93 97 00 	sts	0x0097, r25
     25c:	08 95       	ret

0000025e <DecSegm>:

 
    }





void		DecSegm( unsigned int Arg0)
    {
     25e:	fc 01       	movw	r30, r24
     unsigned int	Arg1;

	if(Arg0>9999)
     260:	80 51       	subi	r24, 0x10	; 16
     262:	97 42       	sbci	r25, 0x27	; 39
     264:	10 f0       	brcs	.+4      	; 0x26a
	Arg0=9999;
     266:	ef e0       	ldi	r30, 0x0F	; 15
     268:	f7 e2       	ldi	r31, 0x27	; 39
    Arg1=Arg0/1000;
     26a:	28 ee       	ldi	r18, 0xE8	; 232
     26c:	33 e0       	ldi	r19, 0x03	; 3
     26e:	cf 01       	movw	r24, r30
     270:	b9 01       	movw	r22, r18
     272:	c3 da       	rcall	.-2682   	; 0xfffff7fa
	IndData[3]=Arg1;
     274:	60 93 77 01 	sts	0x0177, r22
    Arg0=Arg0-(Arg1*1000);
     278:	62 9f       	mul	r22, r18
     27a:	a0 01       	movw	r20, r0
     27c:	63 9f       	mul	r22, r19
     27e:	50 0d       	add	r21, r0
     280:	72 9f       	mul	r23, r18
     282:	50 0d       	add	r21, r0
     284:	11 24       	eor	r1, r1
     286:	e4 1b       	sub	r30, r20
     288:	f5 0b       	sbc	r31, r21
    Arg1=Arg0/100;
     28a:	24 e6       	ldi	r18, 0x64	; 100
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	cf 01       	movw	r24, r30
     290:	b9 01       	movw	r22, r18
     292:	b3 da       	rcall	.-2714   	; 0xfffff7fa
	IndData[2]=Arg1;
     294:	60 93 76 01 	sts	0x0176, r22
    Arg0=Arg0-(Arg1*100);
     298:	62 9f       	mul	r22, r18
     29a:	a0 01       	movw	r20, r0
     29c:	63 9f       	mul	r22, r19
     29e:	50 0d       	add	r21, r0
     2a0:	72 9f       	mul	r23, r18
     2a2:	50 0d       	add	r21, r0
     2a4:	11 24       	eor	r1, r1
     2a6:	e4 1b       	sub	r30, r20
     2a8:	f5 0b       	sbc	r31, r21
    Arg1=Arg0/10;
     2aa:	cf 01       	movw	r24, r30
     2ac:	6a e0       	ldi	r22, 0x0A	; 10
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	a4 da       	rcall	.-2744   	; 0xfffff7fa
	IndData[1]=Arg1;
     2b2:	60 93 75 01 	sts	0x0175, r22
    Arg0=Arg0-(Arg1*10);
     2b6:	cb 01       	movw	r24, r22
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	88 0f       	add	r24, r24
     2c2:	99 1f       	adc	r25, r25
     2c4:	86 0f       	add	r24, r22
     2c6:	97 1f       	adc	r25, r23
     2c8:	86 0f       	add	r24, r22
     2ca:	97 1f       	adc	r25, r23
     2cc:	e8 1b       	sub	r30, r24
     2ce:	f9 0b       	sbc	r31, r25
	IndData[0]=Arg0;
     2d0:	e0 93 74 01 	sts	0x0174, r30
     2d4:	08 95       	ret

000002d6 <WriteEeprom>:
	
    }



      


void    WriteEeprom(unsigned char Arg4,unsigned char Arg5)
    {
    _WDR();
     2d6:	a8 95       	wdr
    while(bit_is_set(EECR,EEWE))
     2d8:	e1 99       	sbic	0x1c, 1	; 28
     2da:	fe cf       	rjmp	.-4      	; 0x2d8
    ;
    while(bit_is_set(SPMCR,SPMEN))
     2dc:	07 b6       	in	r0, 0x37	; 55
     2de:	00 fc       	sbrc	r0, 0
     2e0:	fd cf       	rjmp	.-6      	; 0x2dc
    ;

	EEARL=Arg4;
     2e2:	8e bb       	out	0x1e, r24	; 30
	EEARH=0;
     2e4:	1f ba       	out	0x1f, r1	; 31
	EEDR=Arg5;
     2e6:	6d bb       	out	0x1d, r22	; 29
    SregTemp=SREG;
     2e8:	8f b7       	in	r24, 0x3f	; 63
     2ea:	80 93 9b 00 	sts	0x009B, r24
    _CLI();
     2ee:	f8 94       	cli
	EECR |=(1<<EEMWE);
     2f0:	e2 9a       	sbi	0x1c, 2	; 28
                       		 
	EECR |=(1<<EEWE);
     2f2:	e1 9a       	sbi	0x1c, 1	; 28
    SREG=SregTemp;				
     2f4:	8f bf       	out	0x3f, r24	; 63
    while(bit_is_set(EECR,EEWE))
     2f6:	e1 99       	sbic	0x1c, 1	; 28
     2f8:	fe cf       	rjmp	.-4      	; 0x2f6
    ;

    while(bit_is_set(SPMCR,SPMEN))
     2fa:	07 b6       	in	r0, 0x37	; 55
     2fc:	00 fc       	sbrc	r0, 0
     2fe:	fd cf       	rjmp	.-6      	; 0x2fa
     300:	08 95       	ret

00000302 <ReadEeprom>:
    ;
}

unsigned char    ReadEeprom(unsigned char Arg6)
	
    {		 	
	
	EEARH=0;
     302:	1f ba       	out	0x1f, r1	; 31
    EEARL=Arg6;
     304:	8e bb       	out	0x1e, r24	; 30
	EECR=EECR | (1<<EERE);
     306:	e0 9a       	sbi	0x1c, 0	; 28

	while	(bit_is_set(EECR,EERE))
     308:	e0 99       	sbic	0x1c, 0	; 28
     30a:	fe cf       	rjmp	.-4      	; 0x308
    ;

	return EEDR;
     30c:	8d b3       	in	r24, 0x1d	; 29
    }
     30e:	99 27       	eor	r25, r25
     310:	08 95       	ret

00000312 <InitAd>:



void InitAd   (void)
    {
    ADMUX=0xc0;//2.56=Ref
     312:	80 ec       	ldi	r24, 0xC0	; 192
     314:	87 b9       	out	0x07, r24	; 7
    SFIOR=SFIOR & 0x1f;//start from end AD
     316:	80 b7       	in	r24, 0x30	; 48
     318:	8f 71       	andi	r24, 0x1F	; 31
     31a:	80 bf       	out	0x30, r24	; 48
 	CtAd=CtAd0;
     31c:	88 ee       	ldi	r24, 0xE8	; 232
     31e:	93 e0       	ldi	r25, 0x03	; 3
     320:	90 93 80 01 	sts	0x0180, r25
     324:	80 93 7f 01 	sts	0x017F, r24
	NumberAd=7;
     328:	87 e0       	ldi	r24, 0x07	; 7
     32a:	80 93 be 00 	sts	0x00BE, r24

	ADCSRA=0;
     32e:	16 b8       	out	0x06, r1	; 6
	ADCSRA |=(1<<ADEN);/*enable AD*/
     330:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |=(1<<ADPS2);
     332:	32 9a       	sbi	0x06, 2	; 6
//    ADCSRA |=(1<<ADPS1);
    ADCSRA |=(1<<ADATE);//Auto trigger enable
     334:	35 9a       	sbi	0x06, 5	; 6
	ADCSRA |=(1<<ADPS0); /*32*/	 		
     336:	30 9a       	sbi	0x06, 0	; 6
	ADCSRA |=(1<<ADIE);/* enable interrupt*/
     338:	33 9a       	sbi	0x06, 3	; 6
    ADCSRA |=(1<<ADSC);/* Start*/
     33a:	36 9a       	sbi	0x06, 6	; 6
     33c:	08 95       	ret

0000033e <IndPar>:
    }
    void IndPar(void)
    {
    unsigned int R0; 
    R0=400;
    while(R0--)         _WDR(); 
     33e:	8f e8       	ldi	r24, 0x8F	; 143
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	a8 95       	wdr
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	2f ef       	ldi	r18, 0xFF	; 255
     348:	8f 3f       	cpi	r24, 0xFF	; 255
     34a:	92 07       	cpc	r25, r18
     34c:	d1 f7       	brne	.-12     	; 0x342
    SPDR=IndData[3]+0x30;
     34e:	80 91 77 01 	lds	r24, 0x0177
     352:	80 5d       	subi	r24, 0xD0	; 208
     354:	8f b9       	out	0x0f, r24	; 15
    R0=400;
    while(R0--)         _WDR(); 
     356:	8f e8       	ldi	r24, 0x8F	; 143
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	a8 95       	wdr
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	2f ef       	ldi	r18, 0xFF	; 255
     360:	8f 3f       	cpi	r24, 0xFF	; 255
     362:	92 07       	cpc	r25, r18
     364:	d1 f7       	brne	.-12     	; 0x35a
    SPDR=IndData[2]+0x30;
     366:	80 91 76 01 	lds	r24, 0x0176
     36a:	80 5d       	subi	r24, 0xD0	; 208
     36c:	8f b9       	out	0x0f, r24	; 15
    R0=400;
    while(R0--)         _WDR(); 
     36e:	8f e8       	ldi	r24, 0x8F	; 143
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	a8 95       	wdr
     374:	01 97       	sbiw	r24, 0x01	; 1
     376:	2f ef       	ldi	r18, 0xFF	; 255
     378:	8f 3f       	cpi	r24, 0xFF	; 255
     37a:	92 07       	cpc	r25, r18
     37c:	d1 f7       	brne	.-12     	; 0x372
    SPDR=IndData[1]+0x30;
     37e:	80 91 75 01 	lds	r24, 0x0175
     382:	80 5d       	subi	r24, 0xD0	; 208
     384:	8f b9       	out	0x0f, r24	; 15

    R0=400;
    while(R0--)         _WDR(); 
     386:	8f e8       	ldi	r24, 0x8F	; 143
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	a8 95       	wdr
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	2f ef       	ldi	r18, 0xFF	; 255
     390:	8f 3f       	cpi	r24, 0xFF	; 255
     392:	92 07       	cpc	r25, r18
     394:	d1 f7       	brne	.-12     	; 0x38a
    SPDR=IndData[0]+0x30;
     396:	80 91 74 01 	lds	r24, 0x0174
     39a:	80 5d       	subi	r24, 0xD0	; 208
     39c:	8f b9       	out	0x0f, r24	; 15
     39e:	08 95       	ret

000003a0 <IndPar3>:


    }

void IndPar3(void)
    {



    while(!(UCSRA & 0x20))
   _WDR();
     3a0:	5d 99       	sbic	0x0b, 5	; 11
     3a2:	03 c0       	rjmp	.+6      	; 0x3aa
     3a4:	a8 95       	wdr
     3a6:	5d 9b       	sbis	0x0b, 5	; 11
     3a8:	fd cf       	rjmp	.-6      	; 0x3a4
    UDR=IndData[2]+0x30;
     3aa:	80 91 76 01 	lds	r24, 0x0176
     3ae:	80 5d       	subi	r24, 0xD0	; 208
     3b0:	8c b9       	out	0x0c, r24	; 12
    while(!(UCSRA & 0x20))
   _WDR();
     3b2:	5d 99       	sbic	0x0b, 5	; 11
     3b4:	03 c0       	rjmp	.+6      	; 0x3bc
     3b6:	a8 95       	wdr
     3b8:	5d 9b       	sbis	0x0b, 5	; 11
     3ba:	fd cf       	rjmp	.-6      	; 0x3b6
    UDR=IndData[1]+0x30;
     3bc:	80 91 75 01 	lds	r24, 0x0175
     3c0:	80 5d       	subi	r24, 0xD0	; 208
     3c2:	8c b9       	out	0x0c, r24	; 12

    while(!(UCSRA & 0x20))
    _WDR();
     3c4:	5d 99       	sbic	0x0b, 5	; 11
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce
     3c8:	a8 95       	wdr
     3ca:	5d 9b       	sbis	0x0b, 5	; 11
     3cc:	fd cf       	rjmp	.-6      	; 0x3c8
    UDR=IndData[0]+0x30;
     3ce:	80 91 74 01 	lds	r24, 0x0174
     3d2:	80 5d       	subi	r24, 0xD0	; 208
     3d4:	8c b9       	out	0x0c, r24	; 12
     3d6:	08 95       	ret

000003d8 <ClearInd>:
 
    }
void	ClearInd(void)
    {
     
     while(!(UCSRA & 0x20))//!RegInd)
     _WDR();
     3d8:	5d 99       	sbic	0x0b, 5	; 11
     3da:	03 c0       	rjmp	.+6      	; 0x3e2
     3dc:	a8 95       	wdr
     3de:	5d 9b       	sbis	0x0b, 5	; 11
     3e0:	fd cf       	rjmp	.-6      	; 0x3dc
    UDR=0xc;
     3e2:	8c e0       	ldi	r24, 0x0C	; 12
     3e4:	8c b9       	out	0x0c, r24	; 12
     3e6:	08 95       	ret

000003e8 <SetCursor>:
    }
  void	SetCursor(unsigned char R2,unsigned char R1)
    {
     3e8:	28 2f       	mov	r18, r24
    unsigned int R0;  
    R0=300;
    while(R0--)         _WDR();
     3ea:	8b e2       	ldi	r24, 0x2B	; 43
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	a8 95       	wdr
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	3f ef       	ldi	r19, 0xFF	; 255
     3f4:	8f 3f       	cpi	r24, 0xFF	; 255
     3f6:	93 07       	cpc	r25, r19
     3f8:	d1 f7       	brne	.-12     	; 0x3ee
    SPDR=0x1f;
     3fa:	8f e1       	ldi	r24, 0x1F	; 31
     3fc:	8f b9       	out	0x0f, r24	; 15
    R0=300;
    while(R0--)         _WDR();
     3fe:	8b e2       	ldi	r24, 0x2B	; 43
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	a8 95       	wdr
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	3f ef       	ldi	r19, 0xFF	; 255
     408:	8f 3f       	cpi	r24, 0xFF	; 255
     40a:	93 07       	cpc	r25, r19
     40c:	d1 f7       	brne	.-12     	; 0x402
    SPDR=0x24;
     40e:	84 e2       	ldi	r24, 0x24	; 36
     410:	8f b9       	out	0x0f, r24	; 15
    R0=300;
    while(R0--)         _WDR();
     412:	8b e2       	ldi	r24, 0x2B	; 43
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	a8 95       	wdr
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	3f ef       	ldi	r19, 0xFF	; 255
     41c:	8f 3f       	cpi	r24, 0xFF	; 255
     41e:	93 07       	cpc	r25, r19
     420:	d1 f7       	brne	.-12     	; 0x416
    SPDR=R2;
     422:	2f b9       	out	0x0f, r18	; 15
    R0=300;
    while(R0--)         _WDR();
     424:	8b e2       	ldi	r24, 0x2B	; 43
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	a8 95       	wdr
     42a:	01 97       	sbiw	r24, 0x01	; 1
     42c:	2f ef       	ldi	r18, 0xFF	; 255
     42e:	8f 3f       	cpi	r24, 0xFF	; 255
     430:	92 07       	cpc	r25, r18
     432:	d1 f7       	brne	.-12     	; 0x428
    SPDR=0;
     434:	1f b8       	out	0x0f, r1	; 15
    R0=300;
    while(R0--)         _WDR();
     436:	8b e2       	ldi	r24, 0x2B	; 43
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	a8 95       	wdr
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	3f ef       	ldi	r19, 0xFF	; 255
     440:	8f 3f       	cpi	r24, 0xFF	; 255
     442:	93 07       	cpc	r25, r19
     444:	d1 f7       	brne	.-12     	; 0x43a
    SPDR=R1;
     446:	6f b9       	out	0x0f, r22	; 15
    R0=300;
    while(R0--)         _WDR();
     448:	8b e2       	ldi	r24, 0x2B	; 43
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	a8 95       	wdr
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	2f ef       	ldi	r18, 0xFF	; 255
     452:	8f 3f       	cpi	r24, 0xFF	; 255
     454:	92 07       	cpc	r25, r18
     456:	d1 f7       	brne	.-12     	; 0x44c
    SPDR=0;
     458:	1f b8       	out	0x0f, r1	; 15
     45a:	08 95       	ret

0000045c <TransmitInd>:

    }


void    TransmitInd(unsigned char R1)
{


    if(R1>=192)
     45c:	80 3c       	cpi	r24, 0xC0	; 192
     45e:	08 f0       	brcs	.+2      	; 0x462
    R1=R1-64;
     460:	80 54       	subi	r24, 0x40	; 64
    while(!(UCSRA & 0x20))
    _WDR();    
     462:	5d 99       	sbic	0x0b, 5	; 11
     464:	03 c0       	rjmp	.+6      	; 0x46c
     466:	a8 95       	wdr
     468:	5d 9b       	sbis	0x0b, 5	; 11
     46a:	fd cf       	rjmp	.-6      	; 0x466
    UDR=R1;           
     46c:	8c b9       	out	0x0c, r24	; 12
     46e:	08 95       	ret

00000470 <WaitTWCR>:
 }
unsigned char WaitTWCR(void)
    {
   while(!(TWCR & 0x80))
        {

    if(CtTWCR)
		{
    --CtTWCR;
	_WDR();
		}
    else
            {
    CtTWCR=CtTWCR0;
    return 0;//error
     470:	06 b6       	in	r0, 0x36	; 54
     472:	07 fc       	sbrc	r0, 7
     474:	0e c0       	rjmp	.+28     	; 0x492
     476:	20 91 cc 00 	lds	r18, 0x00CC
     47a:	30 91 cd 00 	lds	r19, 0x00CD
     47e:	c9 01       	movw	r24, r18
     480:	21 15       	cp	r18, r1
     482:	31 05       	cpc	r19, r1
     484:	79 f0       	breq	.+30     	; 0x4a4
     486:	21 50       	subi	r18, 0x01	; 1
     488:	30 40       	sbci	r19, 0x00	; 0
     48a:	a8 95       	wdr
     48c:	06 b6       	in	r0, 0x36	; 54
     48e:	07 fe       	sbrs	r0, 7
     490:	f6 cf       	rjmp	.-20     	; 0x47e
            }
        }
    CtTWCR=CtTWCR0;
     492:	80 e1       	ldi	r24, 0x10	; 16
     494:	97 e2       	ldi	r25, 0x27	; 39
     496:	90 93 cd 00 	sts	0x00CD, r25
     49a:	80 93 cc 00 	sts	0x00CC, r24
    return 1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
    }
     4a2:	08 95       	ret
     4a4:	20 e1       	ldi	r18, 0x10	; 16
     4a6:	37 e2       	ldi	r19, 0x27	; 39
     4a8:	30 93 cd 00 	sts	0x00CD, r19
     4ac:	20 93 cc 00 	sts	0x00CC, r18
     4b0:	08 95       	ret
     4b2:	08 95       	ret

000004b4 <Transmit>:

unsigned char    Transmit(void)
    {

    if(!WaitTWCR())
     4b4:	dd df       	rcall	.-70     	; 0x470
     4b6:	88 23       	and	r24, r24
     4b8:	71 f0       	breq	.+28     	; 0x4d6
    return 0;

    if(((TWSR & 0xf8) == 0x8)||((TWSR & 0xf8) == 0x10))//start
     4ba:	81 b1       	in	r24, 0x01	; 1
     4bc:	99 27       	eor	r25, r25
     4be:	88 7f       	andi	r24, 0xF8	; 248
     4c0:	90 70       	andi	r25, 0x00	; 0
     4c2:	08 97       	sbiw	r24, 0x08	; 8
     4c4:	59 f0       	breq	.+22     	; 0x4dc
     4c6:	81 b1       	in	r24, 0x01	; 1
     4c8:	99 27       	eor	r25, r25
     4ca:	88 7f       	andi	r24, 0xF8	; 248
     4cc:	90 70       	andi	r25, 0x00	; 0
     4ce:	40 97       	sbiw	r24, 0x10	; 16
     4d0:	29 f0       	breq	.+10     	; 0x4dc
            {
    TWDR=4;//0x4;//SLA+W
    TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);


            }
    else
            {
    TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     4d2:	84 e9       	ldi	r24, 0x94	; 148
     4d4:	86 bf       	out	0x36, r24	; 54

    return 0;
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	08 95       	ret
     4dc:	84 e0       	ldi	r24, 0x04	; 4
     4de:	83 b9       	out	0x03, r24	; 3
     4e0:	84 ec       	ldi	r24, 0xC4	; 196
     4e2:	86 bf       	out	0x36, r24	; 54

            }
    if(!WaitTWCR())
     4e4:	c5 df       	rcall	.-118    	; 0x470
     4e6:	88 23       	and	r24, r24
     4e8:	b1 f3       	breq	.-20     	; 0x4d6
    return 0;


   if((TWSR & 0xf8)==0x18)//Adres+ACK
     4ea:	81 b1       	in	r24, 0x01	; 1
     4ec:	99 27       	eor	r25, r25
     4ee:	88 7f       	andi	r24, 0xF8	; 248
     4f0:	90 70       	andi	r25, 0x00	; 0
     4f2:	48 97       	sbiw	r24, 0x18	; 24
     4f4:	71 f7       	brne	.-36     	; 0x4d2
            {
    CtTransmit=10;
     4f6:	8a e0       	ldi	r24, 0x0A	; 10
     4f8:	80 93 d0 00 	sts	0x00D0, r24
   TWDR=RegTransmit[CtTransmit];
     4fc:	80 91 72 01 	lds	r24, 0x0172
     500:	12 c0       	rjmp	.+36     	; 0x526
   TWCR=(1<<TWINT)|(1<<TWEN);

            }
    else
            {
    TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);

    return 0;

            }
TT:    if(!WaitTWCR())
    return 0;

   if((TWSR & 0xf8)==0x28)//Data+ACK
     502:	81 b1       	in	r24, 0x01	; 1
     504:	99 27       	eor	r25, r25
     506:	88 7f       	andi	r24, 0xF8	; 248
     508:	90 70       	andi	r25, 0x00	; 0
     50a:	88 97       	sbiw	r24, 0x28	; 40
     50c:	99 f4       	brne	.+38     	; 0x534
            {
    if(CtTransmit)
     50e:	80 91 d0 00 	lds	r24, 0x00D0
     512:	88 23       	and	r24, r24
     514:	a1 f0       	breq	.+40     	; 0x53e
                {
    --CtTransmit;
     516:	81 50       	subi	r24, 0x01	; 1
     518:	80 93 d0 00 	sts	0x00D0, r24
   TWDR=RegTransmit[CtTransmit];
     51c:	e8 2f       	mov	r30, r24
     51e:	ff 27       	eor	r31, r31
     520:	e8 59       	subi	r30, 0x98	; 152
     522:	fe 4f       	sbci	r31, 0xFE	; 254
     524:	80 81       	ld	r24, Z
     526:	83 b9       	out	0x03, r24	; 3
   TWCR=(1<<TWINT)|(1<<TWEN);
     528:	84 e8       	ldi	r24, 0x84	; 132
     52a:	86 bf       	out	0x36, r24	; 54
     52c:	a1 df       	rcall	.-190    	; 0x470
     52e:	88 23       	and	r24, r24
     530:	41 f7       	brne	.-48     	; 0x502
     532:	d1 cf       	rjmp	.-94     	; 0x4d6
   goto TT;
                }
    else
                {

    TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);

    return 1;

               }

            }
    else
            {


    TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     534:	84 e9       	ldi	r24, 0x94	; 148
     536:	86 bf       	out	0x36, r24	; 54

    return 0;
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0

            }
    }
     53c:	08 95       	ret
     53e:	84 e9       	ldi	r24, 0x94	; 148
     540:	86 bf       	out	0x36, r24	; 54
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	08 95       	ret
     548:	08 95       	ret

0000054a <Receive>:

unsigned char    Receive(void)
    {
     54a:	cf 93       	push	r28
    if(!WaitTWCR())
     54c:	91 df       	rcall	.-222    	; 0x470
     54e:	88 23       	and	r24, r24
     550:	41 f0       	breq	.+16     	; 0x562
    return 0;

    if((TWSR & 0xf8) == 0x8)//Well Start
     552:	81 b1       	in	r24, 0x01	; 1
     554:	99 27       	eor	r25, r25
     556:	88 7f       	andi	r24, 0xF8	; 248
     558:	90 70       	andi	r25, 0x00	; 0
     55a:	08 97       	sbiw	r24, 0x08	; 8
     55c:	29 f0       	breq	.+10     	; 0x568
            {
    TWDR=5;//0x5;//SLA+R
    TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
//	++TestLink;

            }
    else
            {
    TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);

    return 0;

            }

    if(!WaitTWCR())
    return 0;

   if((TWSR & 0xf8)==0x40)//Adres+ACK
            {
    CtReceive=11;

   RamReceive[CtReceive]=TWDR;
   TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);

            }
    else
            {
    TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     55e:	84 e9       	ldi	r24, 0x94	; 148
     560:	86 bf       	out	0x36, r24	; 54
 
    return 0;

            }
RR:  if(!WaitTWCR())
    return 0;
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	36 c0       	rjmp	.+108    	; 0x5d4
     568:	85 e0       	ldi	r24, 0x05	; 5
     56a:	83 b9       	out	0x03, r24	; 3
     56c:	c4 ec       	ldi	r28, 0xC4	; 196
     56e:	c6 bf       	out	0x36, r28	; 54
     570:	7f df       	rcall	.-258    	; 0x470
     572:	88 23       	and	r24, r24
     574:	b1 f3       	breq	.-20     	; 0x562
     576:	81 b1       	in	r24, 0x01	; 1
     578:	99 27       	eor	r25, r25
     57a:	88 7f       	andi	r24, 0xF8	; 248
     57c:	90 70       	andi	r25, 0x00	; 0
     57e:	80 34       	cpi	r24, 0x40	; 64
     580:	91 05       	cpc	r25, r1
     582:	69 f7       	brne	.-38     	; 0x55e
     584:	8b e0       	ldi	r24, 0x0B	; 11
     586:	80 93 9c 00 	sts	0x009C, r24
     58a:	83 b1       	in	r24, 0x03	; 3
     58c:	80 93 c6 01 	sts	0x01C6, r24
     590:	c6 bf       	out	0x36, r28	; 54
     592:	6e df       	rcall	.-292    	; 0x470
     594:	88 23       	and	r24, r24
     596:	29 f3       	breq	.-54     	; 0x562
 
   if((TWSR & 0xf8)==0x50)//Data+ACK
     598:	81 b1       	in	r24, 0x01	; 1
     59a:	99 27       	eor	r25, r25
     59c:	88 7f       	andi	r24, 0xF8	; 248
     59e:	90 70       	andi	r25, 0x00	; 0
     5a0:	80 35       	cpi	r24, 0x50	; 80
     5a2:	91 05       	cpc	r25, r1
     5a4:	99 f4       	brne	.+38     	; 0x5cc
            {
    if(CtReceive)
     5a6:	80 91 9c 00 	lds	r24, 0x009C
     5aa:	88 23       	and	r24, r24
     5ac:	61 f0       	breq	.+24     	; 0x5c6
                {
   
    --CtReceive;
     5ae:	81 50       	subi	r24, 0x01	; 1
     5b0:	80 93 9c 00 	sts	0x009C, r24
   RamReceive[CtReceive]=TWDR;
     5b4:	e8 2f       	mov	r30, r24
     5b6:	ff 27       	eor	r31, r31
     5b8:	e5 54       	subi	r30, 0x45	; 69
     5ba:	fe 4f       	sbci	r31, 0xFE	; 254
     5bc:	83 b1       	in	r24, 0x03	; 3
     5be:	80 83       	st	Z, r24

   TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     5c0:	84 ec       	ldi	r24, 0xC4	; 196
   goto RR;
                }
    else
                {
    TWCR=(1<<TWINT)|(1<<TWEN);
     5c2:	86 bf       	out	0x36, r24	; 54
     5c4:	e6 cf       	rjmp	.-52     	; 0x592
     5c6:	84 e8       	ldi	r24, 0x84	; 132
     5c8:	86 bf       	out	0x36, r24	; 54
     5ca:	e3 cf       	rjmp	.-58     	; 0x592
 
    goto RR;

                }

            }
    else
            {
 
    TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     5cc:	84 e9       	ldi	r24, 0x94	; 148
     5ce:	86 bf       	out	0x36, r24	; 54

    return 1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <ReceiveTransmitMaster>:

            }

    }



    void    ReceiveTransmitMaster(void)
{
//ControlSum for Transmit
    RegTransmit[0]=0;
     5d8:	10 92 68 01 	sts	0x0168, r1


    for(Reg0=1;Reg0<=10;++Reg0)
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	e9 e6       	ldi	r30, 0x69	; 105
     5e2:	f1 e0       	ldi	r31, 0x01	; 1
    {
//    RegTransmit[Reg0][0]=3;
    RegTransmit[0] +=RegTransmit[Reg0];
     5e4:	80 91 68 01 	lds	r24, 0x0168
     5e8:	91 91       	ld	r25, Z+
     5ea:	89 0f       	add	r24, r25
     5ec:	80 93 68 01 	sts	0x0168, r24
     5f0:	9b 01       	movw	r18, r22
     5f2:	2f 5f       	subi	r18, 0xFF	; 255
     5f4:	3f 4f       	sbci	r19, 0xFF	; 255
     5f6:	b9 01       	movw	r22, r18
     5f8:	2b 30       	cpi	r18, 0x0B	; 11
     5fa:	31 05       	cpc	r19, r1
     5fc:	98 f3       	brcs	.-26     	; 0x5e4
     5fe:	30 93 af 00 	sts	0x00AF, r19
     602:	20 93 ae 00 	sts	0x00AE, r18
//    RegTransmit[Reg0][1]=4;


    }
//Transmit
    TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//Start
     606:	84 ea       	ldi	r24, 0xA4	; 164
     608:	86 bf       	out	0x36, r24	; 54
    CtTWCR=CtTWCR0;
     60a:	80 e1       	ldi	r24, 0x10	; 16
     60c:	97 e2       	ldi	r25, 0x27	; 39
     60e:	90 93 cd 00 	sts	0x00CD, r25
     612:	80 93 cc 00 	sts	0x00CC, r24
    if(!Transmit())
     616:	4e df       	rcall	.-356    	; 0x4b4
     618:	88 23       	and	r24, r24
     61a:	11 f4       	brne	.+4      	; 0x620
    {
    TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     61c:	84 e9       	ldi	r24, 0x94	; 148
     61e:	86 bf       	out	0x36, r24	; 54
    Reg0=5000;

    }
    else
    {

    Reg0=5000;//
     620:	68 e8       	ldi	r22, 0x88	; 136
     622:	73 e1       	ldi	r23, 0x13	; 19
    }
    while(Reg0)
	{_WDR();
     624:	a8 95       	wdr
    --Reg0;
     626:	9b 01       	movw	r18, r22
     628:	21 50       	subi	r18, 0x01	; 1
     62a:	30 40       	sbci	r19, 0x00	; 0
     62c:	b9 01       	movw	r22, r18
     62e:	d1 f7       	brne	.-12     	; 0x624
	}
//for Ind ControlSum
    Reg100=0;
     630:	30 93 94 01 	sts	0x0194, r19
     634:	20 93 93 01 	sts	0x0193, r18
    for(Reg0=1;Reg0<=10;++Reg0)
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	04 c0       	rjmp	.+8      	; 0x646
     63e:	50 93 94 01 	sts	0x0194, r21
     642:	40 93 93 01 	sts	0x0193, r20
    Reg100=Reg100+RamReceive[Reg0];
     646:	fb 01       	movw	r30, r22
     648:	e5 54       	subi	r30, 0x45	; 69
     64a:	fe 4f       	sbci	r31, 0xFE	; 254
     64c:	80 81       	ld	r24, Z
     64e:	40 91 93 01 	lds	r20, 0x0193
     652:	50 91 94 01 	lds	r21, 0x0194
     656:	48 0f       	add	r20, r24
     658:	51 1d       	adc	r21, r1
     65a:	9b 01       	movw	r18, r22
     65c:	2f 5f       	subi	r18, 0xFF	; 255
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
     660:	b9 01       	movw	r22, r18
     662:	2b 30       	cpi	r18, 0x0B	; 11
     664:	31 05       	cpc	r19, r1
     666:	58 f3       	brcs	.-42     	; 0x63e
     668:	30 93 af 00 	sts	0x00AF, r19
     66c:	20 93 ae 00 	sts	0x00AE, r18
    Reg100=RamReceive[0];
     670:	80 91 bb 01 	lds	r24, 0x01BB
     674:	99 27       	eor	r25, r25
     676:	90 93 94 01 	sts	0x0194, r25
     67a:	80 93 93 01 	sts	0x0193, r24

//Receive
   TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//Start
     67e:	84 ea       	ldi	r24, 0xA4	; 164
     680:	86 bf       	out	0x36, r24	; 54
   CtTWCR=CtTWCR0;
     682:	80 e1       	ldi	r24, 0x10	; 16
     684:	97 e2       	ldi	r25, 0x27	; 39
     686:	90 93 cd 00 	sts	0x00CD, r25
     68a:	80 93 cc 00 	sts	0x00CC, r24
    if(Receive())
     68e:	5d df       	rcall	.-326    	; 0x54a
     690:	88 23       	and	r24, r24
     692:	d9 f0       	breq	.+54     	; 0x6ca
    {

//ControlSum
    Reg101=0;
     694:	10 92 91 01 	sts	0x0191, r1
    for(Reg0=1;Reg0<=10;++Reg0)
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	ec eb       	ldi	r30, 0xBC	; 188
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
    Reg101=Reg101+RamReceive[Reg0];
     6a2:	81 91       	ld	r24, Z+
     6a4:	98 0f       	add	r25, r24
     6a6:	9b 01       	movw	r18, r22
     6a8:	2f 5f       	subi	r18, 0xFF	; 255
     6aa:	3f 4f       	sbci	r19, 0xFF	; 255
     6ac:	b9 01       	movw	r22, r18
     6ae:	2b 30       	cpi	r18, 0x0B	; 11
     6b0:	31 05       	cpc	r19, r1
     6b2:	b8 f3       	brcs	.-18     	; 0x6a2
     6b4:	90 93 91 01 	sts	0x0191, r25
    if(Reg101==RamReceive[0])
     6b8:	80 91 bb 01 	lds	r24, 0x01BB
     6bc:	89 17       	cp	r24, r25
     6be:	41 f0       	breq	.+16     	; 0x6d0
     6c0:	30 93 af 00 	sts	0x00AF, r19
     6c4:	20 93 ae 00 	sts	0x00AE, r18
     6c8:	08 95       	ret
        {
    for(Reg0=1;Reg0<=8;++Reg0)
    RomReceive[Reg0]=RamReceive[Reg0];
    CtErrorLink=CtErrorLink0;


        }
    }
    else
    {
    TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     6ca:	84 e9       	ldi	r24, 0x94	; 148
     6cc:	86 bf       	out	0x36, r24	; 54
     6ce:	08 95       	ret
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	a9 e1       	ldi	r26, 0x19	; 25
     6d6:	b1 e0       	ldi	r27, 0x01	; 1
     6d8:	ec eb       	ldi	r30, 0xBC	; 188
     6da:	f1 e0       	ldi	r31, 0x01	; 1
     6dc:	81 91       	ld	r24, Z+
     6de:	8d 93       	st	X+, r24
     6e0:	cb 01       	movw	r24, r22
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	bc 01       	movw	r22, r24
     6e6:	89 30       	cpi	r24, 0x09	; 9
     6e8:	91 05       	cpc	r25, r1
     6ea:	c0 f3       	brcs	.-16     	; 0x6dc
     6ec:	90 93 af 00 	sts	0x00AF, r25
     6f0:	80 93 ae 00 	sts	0x00AE, r24
     6f4:	8e e1       	ldi	r24, 0x1E	; 30
     6f6:	80 93 47 01 	sts	0x0147, r24
     6fa:	08 95       	ret
     6fc:	08 95       	ret

000006fe <LoadRegTransmit>:


    }

} 
void    LoadRegTransmit(void)
    {
	unsigned char R0;
	unsigned char R1;
	unsigned char R2;

	if(NumberBlok==1)
     6fe:	80 91 b9 00 	lds	r24, 0x00B9
     702:	81 30       	cpi	r24, 0x01	; 1
     704:	09 f4       	brne	.+2      	; 0x708
     706:	58 c0       	rjmp	.+176    	; 0x7b8
		{
	R0=4;
	R1=0x10;
	R2=0x40;
		}
	else
		{
	R0=8;
     708:	58 e0       	ldi	r21, 0x08	; 8
	R1=0x20;
     70a:	40 e2       	ldi	r20, 0x20	; 32
	R2=0x80;
     70c:	60 e8       	ldi	r22, 0x80	; 128
		}		
    RegTransmit[1]=RegS;
     70e:	80 91 39 01 	lds	r24, 0x0139
     712:	80 93 69 01 	sts	0x0169, r24
	if((Avaria)||(AvariaI))    
     716:	80 91 c7 01 	lds	r24, 0x01C7
     71a:	88 23       	and	r24, r24
     71c:	41 f5       	brne	.+80     	; 0x76e
     71e:	20 91 a4 00 	lds	r18, 0x00A4
     722:	30 91 a5 00 	lds	r19, 0x00A5
     726:	21 15       	cp	r18, r1
     728:	31 05       	cpc	r19, r1
     72a:	29 f5       	brne	.+74     	; 0x776
    RegTransmit[2] |=1;
	else
    RegTransmit[2] &=0xfe;
     72c:	90 91 6a 01 	lds	r25, 0x016A
     730:	9e 7f       	andi	r25, 0xFE	; 254
	if(RegimWork==7)
     732:	80 91 9d 00 	lds	r24, 0x009D
     736:	87 30       	cpi	r24, 0x07	; 7
     738:	29 f5       	brne	.+74     	; 0x784
    RegTransmit[2] |=4;
     73a:	94 60       	ori	r25, 0x04	; 4
	else
    RegTransmit[2] &=0xfb;
	if(AvariaI & 1)
     73c:	20 fd       	sbrc	r18, 0
     73e:	25 c0       	rjmp	.+74     	; 0x78a
    RegTransmit[2] |=0x10;
	else
    RegTransmit[2] &=0xef;
     740:	9f 7e       	andi	r25, 0xEF	; 239
	if(AvariaI & 2)
     742:	21 fd       	sbrc	r18, 1
     744:	25 c0       	rjmp	.+74     	; 0x790
    RegTransmit[2] |=0x8;
	else
    RegTransmit[2] &=0xf7;
     746:	97 7f       	andi	r25, 0xF7	; 247
	if(RomReceiveRS[3][0] & R0)
     748:	80 91 e6 00 	lds	r24, 0x00E6
     74c:	85 23       	and	r24, r21
     74e:	29 f5       	brne	.+74     	; 0x79a
    RegTransmit[2] |=0x20;
	else
    RegTransmit[2] &=0xdf;
     750:	9f 7d       	andi	r25, 0xDF	; 223
	if(RomReceiveRS[2][0] & R1)
     752:	80 91 df 00 	lds	r24, 0x00DF
     756:	48 23       	and	r20, r24
     758:	29 f5       	brne	.+74     	; 0x7a4
    RegTransmit[2] |=0x40;
	else
    RegTransmit[2] &=0xbf;
     75a:	9f 7b       	andi	r25, 0xBF	; 191
	if(RomReceiveRS[2][0] & R2)
     75c:	86 23       	and	r24, r22
     75e:	29 f5       	brne	.+74     	; 0x7aa
    RegTransmit[2] |=0x80;
	else
    RegTransmit[2] &=0x7f;
     760:	9f 77       	andi	r25, 0x7F	; 127
	if(RomReceiveRS[4][0] & 2)
     762:	80 91 ed 00 	lds	r24, 0x00ED
     766:	81 fd       	sbrc	r24, 1
     768:	25 c0       	rjmp	.+74     	; 0x7b4
    RegTransmit[2] |=0x2;
	else
    RegTransmit[2] &=0xfd;
     76a:	9d 7f       	andi	r25, 0xFD	; 253
     76c:	29 c0       	rjmp	.+82     	; 0x7c0
     76e:	20 91 a4 00 	lds	r18, 0x00A4
     772:	30 91 a5 00 	lds	r19, 0x00A5
     776:	90 91 6a 01 	lds	r25, 0x016A
     77a:	91 60       	ori	r25, 0x01	; 1
     77c:	80 91 9d 00 	lds	r24, 0x009D
     780:	87 30       	cpi	r24, 0x07	; 7
     782:	d9 f2       	breq	.-74     	; 0x73a
     784:	9b 7f       	andi	r25, 0xFB	; 251
     786:	20 ff       	sbrs	r18, 0
     788:	db cf       	rjmp	.-74     	; 0x740
     78a:	90 61       	ori	r25, 0x10	; 16
     78c:	21 ff       	sbrs	r18, 1
     78e:	db cf       	rjmp	.-74     	; 0x746
     790:	98 60       	ori	r25, 0x08	; 8
     792:	80 91 e6 00 	lds	r24, 0x00E6
     796:	85 23       	and	r24, r21
     798:	d9 f2       	breq	.-74     	; 0x750
     79a:	90 62       	ori	r25, 0x20	; 32
     79c:	80 91 df 00 	lds	r24, 0x00DF
     7a0:	48 23       	and	r20, r24
     7a2:	d9 f2       	breq	.-74     	; 0x75a
     7a4:	90 64       	ori	r25, 0x40	; 64
     7a6:	86 23       	and	r24, r22
     7a8:	d9 f2       	breq	.-74     	; 0x760
     7aa:	90 68       	ori	r25, 0x80	; 128
     7ac:	80 91 ed 00 	lds	r24, 0x00ED
     7b0:	81 ff       	sbrs	r24, 1
     7b2:	db cf       	rjmp	.-74     	; 0x76a
     7b4:	92 60       	ori	r25, 0x02	; 2
     7b6:	04 c0       	rjmp	.+8      	; 0x7c0
     7b8:	54 e0       	ldi	r21, 0x04	; 4
     7ba:	40 e1       	ldi	r20, 0x10	; 16
     7bc:	60 e4       	ldi	r22, 0x40	; 64
     7be:	a7 cf       	rjmp	.-178    	; 0x70e
     7c0:	90 93 6a 01 	sts	0x016A, r25

    RegTransmit[3]=CtInd;
     7c4:	80 91 8a 01 	lds	r24, 0x018A
     7c8:	80 93 6b 01 	sts	0x016B, r24
    RegTransmit[4]=Koef[8];//NDiz
     7cc:	80 91 b8 00 	lds	r24, 0x00B8
     7d0:	80 93 6c 01 	sts	0x016C, r24
    RegTransmit[5]=Koef[7];
     7d4:	80 91 b7 00 	lds	r24, 0x00B7
     7d8:	80 93 6d 01 	sts	0x016D, r24
     7dc:	08 95       	ret

000007de <AccountU>:



    }    
int unsigned AccountU(unsigned char Arg0)
    {
    unsigned int R0;
    unsigned int R1;
    unsigned char R2;
    unsigned int  R3;

    R0=AdResult[Arg0];
     7de:	a8 2f       	mov	r26, r24
     7e0:	bb 27       	eor	r27, r27
     7e2:	fd 01       	movw	r30, r26
     7e4:	ea 0f       	add	r30, r26
     7e6:	fb 1f       	adc	r31, r27
     7e8:	eb 55       	subi	r30, 0x5B	; 91
     7ea:	fe 4f       	sbci	r31, 0xFE	; 254
     7ec:	20 81       	ld	r18, Z
     7ee:	31 81       	ldd	r19, Z+1	; 0x01
	R0=R0>>2;
     7f0:	36 95       	lsr	r19
     7f2:	27 95       	ror	r18
     7f4:	36 95       	lsr	r19
     7f6:	27 95       	ror	r18
    R2=Arg0;
    R1=Koef[Arg0];
     7f8:	a0 55       	subi	r26, 0x50	; 80
     7fa:	bf 4f       	sbci	r27, 0xFF	; 255
     7fc:	8c 91       	ld	r24, X
     7fe:	99 27       	eor	r25, r25
    R1=R0*R1;
     800:	82 9f       	mul	r24, r18
     802:	a0 01       	movw	r20, r0
     804:	83 9f       	mul	r24, r19
     806:	50 0d       	add	r21, r0
     808:	92 9f       	mul	r25, r18
     80a:	50 0d       	add	r21, r0
     80c:	11 24       	eor	r1, r1
     80e:	ca 01       	movw	r24, r20
    R1=R1>>8;
     810:	89 2f       	mov	r24, r25
     812:	99 27       	eor	r25, r25
    R0 +=R1;
    R3=R0;
    return R3; 
    }
     814:	82 0f       	add	r24, r18
     816:	93 1f       	adc	r25, r19
     818:	08 95       	ret

0000081a <AccountI>:
int unsigned AccountI(unsigned char Arg0)
    {
    unsigned int R0;
    unsigned int R1;
    unsigned char R2;
    unsigned int  R3;

    R0=AdResult[Arg0]>>1;
     81a:	a8 2f       	mov	r26, r24
     81c:	bb 27       	eor	r27, r27
     81e:	fd 01       	movw	r30, r26
     820:	ea 0f       	add	r30, r26
     822:	fb 1f       	adc	r31, r27
     824:	eb 55       	subi	r30, 0x5B	; 91
     826:	fe 4f       	sbci	r31, 0xFE	; 254
     828:	20 81       	ld	r18, Z
     82a:	31 81       	ldd	r19, Z+1	; 0x01
     82c:	36 95       	lsr	r19
     82e:	27 95       	ror	r18
    R2=Arg0;
    R1=Koef[Arg0];
     830:	a0 55       	subi	r26, 0x50	; 80
     832:	bf 4f       	sbci	r27, 0xFF	; 255
     834:	8c 91       	ld	r24, X
     836:	99 27       	eor	r25, r25
    R1=R0*R1;
     838:	82 9f       	mul	r24, r18
     83a:	a0 01       	movw	r20, r0
     83c:	83 9f       	mul	r24, r19
     83e:	50 0d       	add	r21, r0
     840:	92 9f       	mul	r25, r18
     842:	50 0d       	add	r21, r0
     844:	11 24       	eor	r1, r1
    R1=R1>>8;
     846:	85 2f       	mov	r24, r21
     848:	99 27       	eor	r25, r25
    R0 +=R1;
    R3=R0;
    return R3; 
    }
     84a:	82 0f       	add	r24, r18
     84c:	93 1f       	adc	r25, r19
     84e:	08 95       	ret

00000850 <ChangeCtInd>:


    



    void ChangeCtInd(void)
{
    if((RegS & 0x30) != (RegSOld & 0x30))
     850:	e0 91 39 01 	lds	r30, 0x0139
     854:	6e 2f       	mov	r22, r30
     856:	77 27       	eor	r23, r23
     858:	9b 01       	movw	r18, r22
     85a:	20 73       	andi	r18, 0x30	; 48
     85c:	30 70       	andi	r19, 0x00	; 0
     85e:	f0 91 45 01 	lds	r31, 0x0145
     862:	4f 2f       	mov	r20, r31
     864:	55 27       	eor	r21, r21
     866:	ca 01       	movw	r24, r20
     868:	80 73       	andi	r24, 0x30	; 48
     86a:	90 70       	andi	r25, 0x00	; 0
     86c:	28 17       	cp	r18, r24
     86e:	39 07       	cpc	r19, r25
     870:	69 f0       	breq	.+26     	; 0x88c
    {
    if((RegS & 0x10) && (!(RegSOld & 0x10)))
     872:	64 fd       	sbrc	r22, 4
     874:	0c c0       	rjmp	.+24     	; 0x88e
    ++CtInd;
    else if((RegS & 0x20) && (!(RegSOld & 0x20)))
     876:	e5 ff       	sbrs	r30, 5
     878:	07 c0       	rjmp	.+14     	; 0x888
     87a:	f5 fd       	sbrc	r31, 5
     87c:	05 c0       	rjmp	.+10     	; 0x888
    --CtInd;
     87e:	80 91 8a 01 	lds	r24, 0x018A
     882:	81 50       	subi	r24, 0x01	; 1
     884:	80 93 8a 01 	sts	0x018A, r24
    RegSOld=RegS;
     888:	e0 93 45 01 	sts	0x0145, r30
     88c:	08 95       	ret
     88e:	44 fd       	sbrc	r20, 4
     890:	f2 cf       	rjmp	.-28     	; 0x876
     892:	80 91 8a 01 	lds	r24, 0x018A
     896:	8f 5f       	subi	r24, 0xFF	; 255
     898:	80 93 8a 01 	sts	0x018A, r24
     89c:	f5 cf       	rjmp	.-22     	; 0x888
     89e:	08 95       	ret

000008a0 <AccountIMax>:
    }

}





void AccountIMax(void)
    {
    IMax=IA;
     8a0:	80 91 04 01 	lds	r24, 0x0104
     8a4:	90 91 05 01 	lds	r25, 0x0105
     8a8:	ac 01       	movw	r20, r24
    if(IB>IMax)
     8aa:	20 91 81 01 	lds	r18, 0x0181
     8ae:	30 91 82 01 	lds	r19, 0x0182
     8b2:	82 17       	cp	r24, r18
     8b4:	93 07       	cpc	r25, r19
     8b6:	10 f4       	brcc	.+4      	; 0x8bc
    IMax=IB;
     8b8:	c9 01       	movw	r24, r18
     8ba:	a9 01       	movw	r20, r18
    if(IC>IMax)
     8bc:	20 91 11 01 	lds	r18, 0x0111
     8c0:	30 91 12 01 	lds	r19, 0x0112
     8c4:	42 17       	cp	r20, r18
     8c6:	53 07       	cpc	r21, r19
     8c8:	28 f4       	brcc	.+10     	; 0x8d4
    IMax=IC;
     8ca:	30 93 85 01 	sts	0x0185, r19
     8ce:	20 93 84 01 	sts	0x0184, r18
     8d2:	08 95       	ret
     8d4:	90 93 85 01 	sts	0x0185, r25
     8d8:	80 93 84 01 	sts	0x0184, r24
     8dc:	08 95       	ret
     8de:	08 95       	ret

000008e0 <SetAvaria>:
    }   


void    SetAvaria(void)
    {
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	50 91 c7 01 	lds	r21, 0x01C7
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	47 e0       	ldi	r20, 0x07	; 7
     8ee:	e5 e9       	ldi	r30, 0x95	; 149
     8f0:	f1 e0       	ldi	r31, 0x01	; 1
    unsigned char R0;   
     for(R0=0;R0<=7;++R0)
        {
    if(!(CtError[R0]))
     8f2:	81 91       	ld	r24, Z+
     8f4:	91 91       	ld	r25, Z+
     8f6:	89 2b       	or	r24, r25
     8f8:	41 f4       	brne	.+16     	; 0x90a
    Avaria |=(1<<R0);
     8fa:	cb 01       	movw	r24, r22
     8fc:	02 2e       	mov	r0, r18
     8fe:	02 c0       	rjmp	.+4      	; 0x904
     900:	88 0f       	add	r24, r24
     902:	99 1f       	adc	r25, r25
     904:	0a 94       	dec	r0
     906:	e2 f7       	brpl	.-8      	; 0x900
     908:	58 2b       	or	r21, r24
     90a:	41 50       	subi	r20, 0x01	; 1
     90c:	2f 5f       	subi	r18, 0xFF	; 255
     90e:	3f 4f       	sbci	r19, 0xFF	; 255
     910:	47 ff       	sbrs	r20, 7
     912:	ef cf       	rjmp	.-34     	; 0x8f2
     914:	50 93 c7 01 	sts	0x01C7, r21
     918:	08 95       	ret

0000091a <ControlRegimError>:

        }

    }
void    ControlRegimError(void)
    {

	if(RegimWork==2) 
     91a:	90 91 9d 00 	lds	r25, 0x009D
     91e:	92 30       	cpi	r25, 0x02	; 2
     920:	61 f0       	breq	.+24     	; 0x93a
	RegimError |=2;
	else
	RegimError &=0xfd;
     922:	80 91 c1 00 	lds	r24, 0x00C1
     926:	8d 7f       	andi	r24, 0xFD	; 253
	if(RegimWork==3) 
     928:	93 30       	cpi	r25, 0x03	; 3
     92a:	59 f0       	breq	.+22     	; 0x942
	RegimError |=4;
	else
	RegimError &=0xfb;
     92c:	8b 7f       	andi	r24, 0xFB	; 251
	if(RegimWork==5) 
     92e:	95 30       	cpi	r25, 0x05	; 5
     930:	11 f0       	breq	.+4      	; 0x936
	RegimError |=8;
	else
	RegimError &=0xf7;
     932:	87 7f       	andi	r24, 0xF7	; 247
     934:	08 c0       	rjmp	.+16     	; 0x946
     936:	88 60       	ori	r24, 0x08	; 8
     938:	06 c0       	rjmp	.+12     	; 0x946
     93a:	80 91 c1 00 	lds	r24, 0x00C1
     93e:	82 60       	ori	r24, 0x02	; 2
     940:	f5 cf       	rjmp	.-22     	; 0x92c
     942:	84 60       	ori	r24, 0x04	; 4
     944:	f6 cf       	rjmp	.-20     	; 0x932
/*	if((RegimWork==7)&&(!(RegS & 0x10)))
	RegimError |=0x10;
	else*/
	RegimError &=0xef;
//	if((!(RegS & 0x20))&&(!(RegS & 1))) 
//	RegimError |=0x20;
//	else
	RegimError &=0xdf;
//	if((!(RegS & 0x40))&&(!(RegS & 1))) 
//	RegimError |=0x40;
//	else
	RegimError &=0xbf;
     946:	8f 78       	andi	r24, 0x8F	; 143
     948:	80 93 c1 00 	sts	0x00C1, r24
     94c:	08 95       	ret

0000094e <ControlRegimWork>:
/*	if(RomReceiveRS[3][0] & 8)
	RegimError |=0x80;
	else
	RegimError &=0x7f;*/

    }


void    ControlRegimWork(void)
    {

	unsigned char R1;
	unsigned char R2;
	if(NumberBlok==1)
     94e:	80 91 b9 00 	lds	r24, 0x00B9
     952:	81 30       	cpi	r24, 0x01	; 1
     954:	09 f4       	brne	.+2      	; 0x958
     956:	46 c0       	rjmp	.+140    	; 0x9e4
		{
	R1=4;
	R2=4;
		}
	else if(NumberBlok==4)
     958:	84 30       	cpi	r24, 0x04	; 4
     95a:	09 f4       	brne	.+2      	; 0x95e
     95c:	46 c0       	rjmp	.+140    	; 0x9ea
		{
	R1=8;
	R2=1;
		}
	if((Avaria)||(RomReceiveRS[3][0] & R1))
     95e:	80 91 c7 01 	lds	r24, 0x01C7
     962:	88 23       	and	r24, r24
     964:	21 f4       	brne	.+8      	; 0x96e
     966:	80 91 e6 00 	lds	r24, 0x00E6
     96a:	89 23       	and	r24, r25
     96c:	51 f1       	breq	.+84     	; 0x9c2
	++RegStop;
	else if((RomReceiveRS[1][R2] & 0x10)&&(RegS & 0x10))//Zamena
	++RegStop;
	else if(RomReceiveRS[5][6] & 8)
	RegStop=0;
	else if(RomReceiveRS[5][3] & 8)
	RegStop=0;
	else
	++RegStop;
     96e:	80 91 92 00 	lds	r24, 0x0092
     972:	8f 5f       	subi	r24, 0xFF	; 255
     974:	80 93 92 00 	sts	0x0092, r24

	if(RegStop>10)
     978:	80 91 92 00 	lds	r24, 0x0092
     97c:	8b 30       	cpi	r24, 0x0B	; 11
     97e:	18 f0       	brcs	.+6      	; 0x986
	RegStop=10;
     980:	8a e0       	ldi	r24, 0x0A	; 10
     982:	80 93 92 00 	sts	0x0092, r24
	switch(RegimWork)
     986:	80 91 9d 00 	lds	r24, 0x009D
     98a:	99 27       	eor	r25, r25
     98c:	aa 27       	eor	r26, r26
     98e:	bb 27       	eor	r27, r27
     990:	fc 01       	movw	r30, r24
     992:	08 97       	sbiw	r24, 0x08	; 8
     994:	a8 f4       	brcc	.+42     	; 0x9c0
     996:	eb 5e       	subi	r30, 0xEB	; 235
     998:	ff 4f       	sbci	r31, 0xFF	; 255
     99a:	09 94       	ijmp
		{
	case 0:
	if((RegSPCH2 & 1)&&(!RegStop)&&(!(AvariaI)))
	RegimWork=1;
	I50=I50PuskMin+50;
	U50=U50_Nom-50;
	I500=250;
	break;
	case 1:
	if((RegSPCH2 & 2)||(RegStop>=9))
	RegimWork=0;
	if(U50>U50_Nom)
		{
	RegimWork=2;
	I50=I50PuskMin+50;
	I500=250;

		}
	CtK5=200;
	break;
	case 2:
	if((RegSPCH2 & 2)||(RegStop>=9))
	RegimWork=0;
//	if((I50<I50PuskMin)&&(RegS & 4))//K5=on
	if((I500<50)&&(RegS & 4))//K5=on
			{
		if(!CtK5)
	RegimWork=3;
			}
	else
	CtK5=200;
	break;
	case 3:
	if((RegSPCH2 & 2)||(RegStop>=9))
	RegimWork=0;
	if(!(RegS & 4))//K5=off
	RegimWork=4;

	break;
	case 4:
	if((RegSPCH2 & 2)||(RegStop>=9))
	RegimWork=0;
	else
	RegimWork=5;
	break;
	case 5:
	if((RegSPCH2 & 2)||(RegStop>=9))
	RegimWork=0;
	if((RegS & 2) && (RegS & 8))//K4,K6=on
	RegimWork=6;
	break;
	case 6:
	if((RegSPCH2 & 2)||(RegStop>=9))
	RegimWork=0;
	if(RegS & 0x10)//K7=on
	RegimWork=7;
	break;
	case 7:
	if((RegSPCH2 & 2)||(RegStop>=9)||(AvariaI))
     99c:	80 91 c5 00 	lds	r24, 0x00C5
     9a0:	90 91 c6 00 	lds	r25, 0x00C6
     9a4:	81 fd       	sbrc	r24, 1
     9a6:	0a c0       	rjmp	.+20     	; 0x9bc
     9a8:	80 91 92 00 	lds	r24, 0x0092
     9ac:	89 30       	cpi	r24, 0x09	; 9
     9ae:	30 f4       	brcc	.+12     	; 0x9bc
     9b0:	80 91 a4 00 	lds	r24, 0x00A4
     9b4:	90 91 a5 00 	lds	r25, 0x00A5
     9b8:	89 2b       	or	r24, r25
     9ba:	11 f0       	breq	.+4      	; 0x9c0
	RegimWork=0;
     9bc:	10 92 9d 00 	sts	0x009D, r1
     9c0:	08 95       	ret
     9c2:	ff 27       	eor	r31, r31
     9c4:	ef 52       	subi	r30, 0x2F	; 47
     9c6:	ff 4f       	sbci	r31, 0xFF	; 255
     9c8:	87 81       	ldd	r24, Z+7	; 0x07
     9ca:	84 fd       	sbrc	r24, 4
     9cc:	11 c0       	rjmp	.+34     	; 0x9f0
     9ce:	80 91 fa 00 	lds	r24, 0x00FA
     9d2:	83 fd       	sbrc	r24, 3
     9d4:	04 c0       	rjmp	.+8      	; 0x9de
     9d6:	80 91 f7 00 	lds	r24, 0x00F7
     9da:	83 ff       	sbrs	r24, 3
     9dc:	c8 cf       	rjmp	.-112    	; 0x96e
     9de:	10 92 92 00 	sts	0x0092, r1
     9e2:	ca cf       	rjmp	.-108    	; 0x978
     9e4:	e4 e0       	ldi	r30, 0x04	; 4
     9e6:	9e 2f       	mov	r25, r30
     9e8:	ba cf       	rjmp	.-140    	; 0x95e
     9ea:	98 e0       	ldi	r25, 0x08	; 8
     9ec:	e1 e0       	ldi	r30, 0x01	; 1
     9ee:	b7 cf       	rjmp	.-146    	; 0x95e
     9f0:	80 91 39 01 	lds	r24, 0x0139
     9f4:	84 fd       	sbrc	r24, 4
     9f6:	bb cf       	rjmp	.-138    	; 0x96e
     9f8:	ea cf       	rjmp	.-44     	; 0x9ce
     9fa:	80 91 c5 00 	lds	r24, 0x00C5
     9fe:	90 91 c6 00 	lds	r25, 0x00C6
     a02:	80 ff       	sbrs	r24, 0
     a04:	0d c0       	rjmp	.+26     	; 0xa20
     a06:	80 91 92 00 	lds	r24, 0x0092
     a0a:	88 23       	and	r24, r24
     a0c:	49 f4       	brne	.+18     	; 0xa20
     a0e:	80 91 a4 00 	lds	r24, 0x00A4
     a12:	90 91 a5 00 	lds	r25, 0x00A5
     a16:	89 2b       	or	r24, r25
     a18:	19 f4       	brne	.+6      	; 0xa20
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	80 93 9d 00 	sts	0x009D, r24
     a20:	84 e6       	ldi	r24, 0x64	; 100
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	90 93 31 01 	sts	0x0131, r25
     a28:	80 93 30 01 	sts	0x0130, r24
     a2c:	82 ec       	ldi	r24, 0xC2	; 194
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	90 93 ba 01 	sts	0x01BA, r25
     a34:	80 93 b9 01 	sts	0x01B9, r24
     a38:	8a ef       	ldi	r24, 0xFA	; 250
     a3a:	80 93 03 01 	sts	0x0103, r24
     a3e:	08 95       	ret
     a40:	80 91 c5 00 	lds	r24, 0x00C5
     a44:	90 91 c6 00 	lds	r25, 0x00C6
     a48:	81 ff       	sbrs	r24, 1
     a4a:	83 c0       	rjmp	.+262    	; 0xb52
     a4c:	10 92 9d 00 	sts	0x009D, r1
     a50:	80 91 b9 01 	lds	r24, 0x01B9
     a54:	90 91 ba 01 	lds	r25, 0x01BA
     a58:	85 5f       	subi	r24, 0xF5	; 245
     a5a:	91 40       	sbci	r25, 0x01	; 1
     a5c:	60 f0       	brcs	.+24     	; 0xa76
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	80 93 9d 00 	sts	0x009D, r24
     a64:	84 e6       	ldi	r24, 0x64	; 100
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	90 93 31 01 	sts	0x0131, r25
     a6c:	80 93 30 01 	sts	0x0130, r24
     a70:	8a ef       	ldi	r24, 0xFA	; 250
     a72:	80 93 03 01 	sts	0x0103, r24
     a76:	88 ec       	ldi	r24, 0xC8	; 200
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	90 93 0f 01 	sts	0x010F, r25
     a7e:	80 93 0e 01 	sts	0x010E, r24
     a82:	08 95       	ret
     a84:	80 91 c5 00 	lds	r24, 0x00C5
     a88:	90 91 c6 00 	lds	r25, 0x00C6
     a8c:	81 ff       	sbrs	r24, 1
     a8e:	51 c0       	rjmp	.+162    	; 0xb32
     a90:	10 92 9d 00 	sts	0x009D, r1
     a94:	80 91 03 01 	lds	r24, 0x0103
     a98:	82 33       	cpi	r24, 0x32	; 50
     a9a:	68 f7       	brcc	.-38     	; 0xa76
     a9c:	80 91 39 01 	lds	r24, 0x0139
     aa0:	82 ff       	sbrs	r24, 2
     aa2:	e9 cf       	rjmp	.-46     	; 0xa76
     aa4:	80 91 0e 01 	lds	r24, 0x010E
     aa8:	90 91 0f 01 	lds	r25, 0x010F
     aac:	89 2b       	or	r24, r25
     aae:	09 f0       	breq	.+2      	; 0xab2
     ab0:	87 cf       	rjmp	.-242    	; 0x9c0
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	38 c0       	rjmp	.+112    	; 0xb26
     ab6:	80 91 c5 00 	lds	r24, 0x00C5
     aba:	90 91 c6 00 	lds	r25, 0x00C6
     abe:	81 ff       	sbrs	r24, 1
     ac0:	4e c0       	rjmp	.+156    	; 0xb5e
     ac2:	10 92 9d 00 	sts	0x009D, r1
     ac6:	80 91 39 01 	lds	r24, 0x0139
     aca:	82 fd       	sbrc	r24, 2
     acc:	79 cf       	rjmp	.-270    	; 0x9c0
     ace:	84 e0       	ldi	r24, 0x04	; 4
     ad0:	2a c0       	rjmp	.+84     	; 0xb26
     ad2:	80 91 c5 00 	lds	r24, 0x00C5
     ad6:	90 91 c6 00 	lds	r25, 0x00C6
     ada:	81 fd       	sbrc	r24, 1
     adc:	27 c0       	rjmp	.+78     	; 0xb2c
     ade:	80 91 92 00 	lds	r24, 0x0092
     ae2:	89 30       	cpi	r24, 0x09	; 9
     ae4:	18 f5       	brcc	.+70     	; 0xb2c
     ae6:	85 e0       	ldi	r24, 0x05	; 5
     ae8:	1e c0       	rjmp	.+60     	; 0xb26
     aea:	80 91 c5 00 	lds	r24, 0x00C5
     aee:	90 91 c6 00 	lds	r25, 0x00C6
     af2:	81 ff       	sbrs	r24, 1
     af4:	29 c0       	rjmp	.+82     	; 0xb48
     af6:	10 92 9d 00 	sts	0x009D, r1
     afa:	80 91 39 01 	lds	r24, 0x0139
     afe:	99 27       	eor	r25, r25
     b00:	81 ff       	sbrs	r24, 1
     b02:	5e cf       	rjmp	.-324    	; 0x9c0
     b04:	83 ff       	sbrs	r24, 3
     b06:	5c cf       	rjmp	.-328    	; 0x9c0
     b08:	86 e0       	ldi	r24, 0x06	; 6
     b0a:	0d c0       	rjmp	.+26     	; 0xb26
     b0c:	80 91 c5 00 	lds	r24, 0x00C5
     b10:	90 91 c6 00 	lds	r25, 0x00C6
     b14:	81 ff       	sbrs	r24, 1
     b16:	13 c0       	rjmp	.+38     	; 0xb3e
     b18:	10 92 9d 00 	sts	0x009D, r1
     b1c:	80 91 39 01 	lds	r24, 0x0139
     b20:	84 ff       	sbrs	r24, 4
     b22:	4e cf       	rjmp	.-356    	; 0x9c0
     b24:	87 e0       	ldi	r24, 0x07	; 7
     b26:	80 93 9d 00 	sts	0x009D, r24
     b2a:	08 95       	ret
     b2c:	10 92 9d 00 	sts	0x009D, r1
     b30:	08 95       	ret
     b32:	80 91 92 00 	lds	r24, 0x0092
     b36:	89 30       	cpi	r24, 0x09	; 9
     b38:	08 f4       	brcc	.+2      	; 0xb3c
     b3a:	ac cf       	rjmp	.-168    	; 0xa94
     b3c:	a9 cf       	rjmp	.-174    	; 0xa90
     b3e:	80 91 92 00 	lds	r24, 0x0092
     b42:	89 30       	cpi	r24, 0x09	; 9
     b44:	58 f3       	brcs	.-42     	; 0xb1c
     b46:	e8 cf       	rjmp	.-48     	; 0xb18
     b48:	80 91 92 00 	lds	r24, 0x0092
     b4c:	89 30       	cpi	r24, 0x09	; 9
     b4e:	a8 f2       	brcs	.-86     	; 0xafa
     b50:	d2 cf       	rjmp	.-92     	; 0xaf6
     b52:	80 91 92 00 	lds	r24, 0x0092
     b56:	89 30       	cpi	r24, 0x09	; 9
     b58:	08 f4       	brcc	.+2      	; 0xb5c
     b5a:	7a cf       	rjmp	.-268    	; 0xa50
     b5c:	77 cf       	rjmp	.-274    	; 0xa4c
     b5e:	80 91 92 00 	lds	r24, 0x0092
     b62:	89 30       	cpi	r24, 0x09	; 9
     b64:	08 f4       	brcc	.+2      	; 0xb68
     b66:	af cf       	rjmp	.-162    	; 0xac6
     b68:	ac cf       	rjmp	.-168    	; 0xac2
     b6a:	08 95       	ret

00000b6c <ControlRegimWorkDU>:
	break;
	default:break;
		}
    }

void    ControlRegimWorkDU(void)
    {

	unsigned char R1;

	if(NumberBlok==1)
     b6c:	90 91 b9 00 	lds	r25, 0x00B9
     b70:	91 30       	cpi	r25, 0x01	; 1
     b72:	09 f4       	brne	.+2      	; 0xb76
     b74:	4a c0       	rjmp	.+148    	; 0xc0a
		{
	R1=4;
	if(ErrorFar & 0x10)
	EnablePusk=1;
	else if(RomReceiveRS[1][0] & 8)
	EnablePusk=(RomReceiveRS[3][4] & 1);
	else
	EnablePusk=1;


		}
	else if(NumberBlok==4)
     b76:	94 30       	cpi	r25, 0x04	; 4
     b78:	09 f4       	brne	.+2      	; 0xb7c
     b7a:	56 c0       	rjmp	.+172    	; 0xc28
		{
	R1=8;
	if(ErrorFar & 0x2)
	EnablePusk=1;
	else if(RomReceiveRS[1][0] & 4)
			{
	EnablePusk=(RomReceiveRS[3][1] & 1);
	if(!RegimWork)
	RegTransmitRS[3] |=1;//enable pusk PCH1
			}
	else
	EnablePusk=1;
		}
	else
	R1=4;
     b7c:	34 e0       	ldi	r19, 0x04	; 4
     b7e:	90 91 9d 00 	lds	r25, 0x009D
	if((Avaria)||(RomReceiveRS[3][0] & R1))
     b82:	80 91 c7 01 	lds	r24, 0x01C7
     b86:	88 23       	and	r24, r24
     b88:	21 f4       	brne	.+8      	; 0xb92
     b8a:	20 91 e6 00 	lds	r18, 0x00E6
     b8e:	23 23       	and	r18, r19
     b90:	69 f1       	breq	.+90     	; 0xbec
			{
	++RegStop;
     b92:	80 91 92 00 	lds	r24, 0x0092
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	80 93 92 00 	sts	0x0092, r24
	RegTransmitRS[3] |=1;//enable pusk PCH2
     b9c:	80 91 24 01 	lds	r24, 0x0124
     ba0:	81 60       	ori	r24, 0x01	; 1
		}


	else if(RomReceiveRS[1][0] & R1)
		{
	if(RomReceiveRS[5][6] & 8)
	RegStop=0;
	else if(RomReceiveRS[5][3] & 8)
	RegStop=0;
	else
			{
	++RegStop;
	RegTransmitRS[3] &=0xfe;//denable pusk PCH2
			}
		}
	else if(RomReceiveRS[5][0] & R1)
		{
	++RegStop;
	RegTransmitRS[3] &=0xfe;
     ba2:	80 93 24 01 	sts	0x0124, r24
		}
	if(RegStop>10)
     ba6:	80 91 92 00 	lds	r24, 0x0092
     baa:	8b 30       	cpi	r24, 0x0B	; 11
     bac:	18 f0       	brcs	.+6      	; 0xbb4
	RegStop=10;				
     bae:	8a e0       	ldi	r24, 0x0A	; 10
     bb0:	80 93 92 00 	sts	0x0092, r24
	switch(RegimWork)
     bb4:	89 2f       	mov	r24, r25
     bb6:	99 27       	eor	r25, r25
     bb8:	aa 27       	eor	r26, r26
     bba:	bb 27       	eor	r27, r27
     bbc:	fc 01       	movw	r30, r24
     bbe:	08 97       	sbiw	r24, 0x08	; 8
     bc0:	a0 f4       	brcc	.+40     	; 0xbea
     bc2:	e3 5e       	subi	r30, 0xE3	; 227
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	09 94       	ijmp
		{
	case 0:

	if((!RegStop)&&(EnablePusk)&&(!AvariaI))
	RegimWork=1;

	I50=I50PuskMin+50;
	U50=U50_Nom-50;
	I500=250;
	break;
	case 1:
	if(RegStop1>30)
	RegimWork=0;
	RegTransmitRS[3] &=0xfe;
	if(U50>U50_Nom)
		{
	RegimWork=2;
	I50=I50PuskMin+50;
	I500=250;
		}
	CtK5=200;
	RegTransmitRS[3] &=0xfe;
	break;
	case 2:
	if(RegStop1>=30)

	RegimWork=0;
//	if((I50<I50PuskMin)&&(RegS & 4))//K5=on
//	if((I500<100)&&(RegS & 4))//K5=on
	if((I500<100)&&(RegS & 4))//K5=on
			{
		if(!CtK5)
	RegimWork=3;
			}
	else
	CtK5=200;



	break;
	case 3:

	if(RegStop1>=30)

	RegimWork=0;
	if(!(RegS & 4))//K5=off
	RegimWork=4;

	break;
	case 4:
	if(RegStop1>=30)
	RegimWork=0;
	else
	RegimWork=5;
	break;
	case 5:
	if(RegStop1>=30)

	RegimWork=0;
	if((RegS & 2) && (RegS & 8))//K4,K6=on
	RegimWork=6;
	break;
	case 6:

	if(RegStop1>=30)

	RegimWork=0;
	if(U400In >(UMin-50))
	RegimWork=7;
	break;
	case 7:
	RegTransmitRS[3] |=1;
     bc8:	80 91 24 01 	lds	r24, 0x0124
     bcc:	81 60       	ori	r24, 0x01	; 1
     bce:	80 93 24 01 	sts	0x0124, r24
	if((RegStop1>=30)||(AvariaI))
     bd2:	80 91 93 00 	lds	r24, 0x0093
     bd6:	8e 31       	cpi	r24, 0x1E	; 30
     bd8:	30 f4       	brcc	.+12     	; 0xbe6
     bda:	80 91 a4 00 	lds	r24, 0x00A4
     bde:	90 91 a5 00 	lds	r25, 0x00A5
     be2:	89 2b       	or	r24, r25
     be4:	11 f0       	breq	.+4      	; 0xbea
	RegimWork=0;
     be6:	10 92 9d 00 	sts	0x009D, r1
     bea:	08 95       	ret
     bec:	80 91 d8 00 	lds	r24, 0x00D8
     bf0:	83 23       	and	r24, r19
     bf2:	b1 f1       	breq	.+108    	; 0xc60
     bf4:	80 91 fa 00 	lds	r24, 0x00FA
     bf8:	83 fd       	sbrc	r24, 3
     bfa:	04 c0       	rjmp	.+8      	; 0xc04
     bfc:	80 91 f7 00 	lds	r24, 0x00F7
     c00:	83 ff       	sbrs	r24, 3
     c02:	33 c0       	rjmp	.+102    	; 0xc6a
     c04:	20 93 92 00 	sts	0x0092, r18
     c08:	ce cf       	rjmp	.-100    	; 0xba6
     c0a:	34 e0       	ldi	r19, 0x04	; 4
     c0c:	80 91 16 01 	lds	r24, 0x0116
     c10:	84 fd       	sbrc	r24, 4
     c12:	23 c0       	rjmp	.+70     	; 0xc5a
     c14:	80 91 d8 00 	lds	r24, 0x00D8
     c18:	83 ff       	sbrs	r24, 3
     c1a:	1f c0       	rjmp	.+62     	; 0xc5a
     c1c:	80 91 ea 00 	lds	r24, 0x00EA
     c20:	81 70       	andi	r24, 0x01	; 1
     c22:	80 93 17 01 	sts	0x0117, r24
     c26:	ab cf       	rjmp	.-170    	; 0xb7e
     c28:	38 e0       	ldi	r19, 0x08	; 8
     c2a:	80 91 16 01 	lds	r24, 0x0116
     c2e:	81 fd       	sbrc	r24, 1
     c30:	25 c0       	rjmp	.+74     	; 0xc7c
     c32:	80 91 d8 00 	lds	r24, 0x00D8
     c36:	82 ff       	sbrs	r24, 2
     c38:	21 c0       	rjmp	.+66     	; 0xc7c
     c3a:	80 91 e7 00 	lds	r24, 0x00E7
     c3e:	81 70       	andi	r24, 0x01	; 1
     c40:	80 93 17 01 	sts	0x0117, r24
     c44:	90 91 9d 00 	lds	r25, 0x009D
     c48:	99 23       	and	r25, r25
     c4a:	09 f0       	breq	.+2      	; 0xc4e
     c4c:	9a cf       	rjmp	.-204    	; 0xb82
     c4e:	80 91 24 01 	lds	r24, 0x0124
     c52:	81 60       	ori	r24, 0x01	; 1
     c54:	80 93 24 01 	sts	0x0124, r24
     c58:	94 cf       	rjmp	.-216    	; 0xb82
     c5a:	90 93 17 01 	sts	0x0117, r25
     c5e:	8f cf       	rjmp	.-226    	; 0xb7e
     c60:	80 91 f4 00 	lds	r24, 0x00F4
     c64:	83 23       	and	r24, r19
     c66:	09 f4       	brne	.+2      	; 0xc6a
     c68:	9e cf       	rjmp	.-196    	; 0xba6
     c6a:	80 91 92 00 	lds	r24, 0x0092
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	80 93 92 00 	sts	0x0092, r24
     c74:	80 91 24 01 	lds	r24, 0x0124
     c78:	8e 7f       	andi	r24, 0xFE	; 254
     c7a:	93 cf       	rjmp	.-218    	; 0xba2
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 93 17 01 	sts	0x0117, r24
     c82:	7d cf       	rjmp	.-262    	; 0xb7e
     c84:	80 91 92 00 	lds	r24, 0x0092
     c88:	88 23       	and	r24, r24
     c8a:	69 f4       	brne	.+26     	; 0xca6
     c8c:	80 91 17 01 	lds	r24, 0x0117
     c90:	88 23       	and	r24, r24
     c92:	49 f0       	breq	.+18     	; 0xca6
     c94:	80 91 a4 00 	lds	r24, 0x00A4
     c98:	90 91 a5 00 	lds	r25, 0x00A5
     c9c:	89 2b       	or	r24, r25
     c9e:	19 f4       	brne	.+6      	; 0xca6
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 9d 00 	sts	0x009D, r24
     ca6:	84 e6       	ldi	r24, 0x64	; 100
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	90 93 31 01 	sts	0x0131, r25
     cae:	80 93 30 01 	sts	0x0130, r24
     cb2:	82 ec       	ldi	r24, 0xC2	; 194
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	90 93 ba 01 	sts	0x01BA, r25
     cba:	80 93 b9 01 	sts	0x01B9, r24
     cbe:	8a ef       	ldi	r24, 0xFA	; 250
     cc0:	80 93 03 01 	sts	0x0103, r24
     cc4:	08 95       	ret
     cc6:	80 91 93 00 	lds	r24, 0x0093
     cca:	8f 31       	cpi	r24, 0x1F	; 31
     ccc:	08 f0       	brcs	.+2      	; 0xcd0
     cce:	74 c0       	rjmp	.+232    	; 0xdb8
     cd0:	20 91 24 01 	lds	r18, 0x0124
     cd4:	2e 7f       	andi	r18, 0xFE	; 254
     cd6:	80 91 b9 01 	lds	r24, 0x01B9
     cda:	90 91 ba 01 	lds	r25, 0x01BA
     cde:	85 5f       	subi	r24, 0xF5	; 245
     ce0:	91 40       	sbci	r25, 0x01	; 1
     ce2:	60 f0       	brcs	.+24     	; 0xcfc
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	80 93 9d 00 	sts	0x009D, r24
     cea:	84 e6       	ldi	r24, 0x64	; 100
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	90 93 31 01 	sts	0x0131, r25
     cf2:	80 93 30 01 	sts	0x0130, r24
     cf6:	8a ef       	ldi	r24, 0xFA	; 250
     cf8:	80 93 03 01 	sts	0x0103, r24
     cfc:	88 ec       	ldi	r24, 0xC8	; 200
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	90 93 0f 01 	sts	0x010F, r25
     d04:	80 93 0e 01 	sts	0x010E, r24
     d08:	20 93 24 01 	sts	0x0124, r18
     d0c:	08 95       	ret
     d0e:	80 91 93 00 	lds	r24, 0x0093
     d12:	8e 31       	cpi	r24, 0x1E	; 30
     d14:	08 f0       	brcs	.+2      	; 0xd18
     d16:	53 c0       	rjmp	.+166    	; 0xdbe
     d18:	80 91 03 01 	lds	r24, 0x0103
     d1c:	84 36       	cpi	r24, 0x64	; 100
     d1e:	08 f0       	brcs	.+2      	; 0xd22
     d20:	51 c0       	rjmp	.+162    	; 0xdc4
     d22:	80 91 39 01 	lds	r24, 0x0139
     d26:	82 ff       	sbrs	r24, 2
     d28:	4d c0       	rjmp	.+154    	; 0xdc4
     d2a:	80 91 0e 01 	lds	r24, 0x010E
     d2e:	90 91 0f 01 	lds	r25, 0x010F
     d32:	89 2b       	or	r24, r25
     d34:	09 f0       	breq	.+2      	; 0xd38
     d36:	59 cf       	rjmp	.-334    	; 0xbea
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	30 c0       	rjmp	.+96     	; 0xd9c
     d3c:	80 91 93 00 	lds	r24, 0x0093
     d40:	8e 31       	cpi	r24, 0x1E	; 30
     d42:	b8 f5       	brcc	.+110    	; 0xdb2
     d44:	80 91 39 01 	lds	r24, 0x0139
     d48:	82 fd       	sbrc	r24, 2
     d4a:	4f cf       	rjmp	.-354    	; 0xbea
     d4c:	84 e0       	ldi	r24, 0x04	; 4
     d4e:	26 c0       	rjmp	.+76     	; 0xd9c
     d50:	80 91 93 00 	lds	r24, 0x0093
     d54:	8e 31       	cpi	r24, 0x1E	; 30
     d56:	40 f1       	brcs	.+80     	; 0xda8
     d58:	10 92 9d 00 	sts	0x009D, r1
     d5c:	08 95       	ret
     d5e:	80 91 93 00 	lds	r24, 0x0093
     d62:	8e 31       	cpi	r24, 0x1E	; 30
     d64:	f0 f4       	brcc	.+60     	; 0xda2
     d66:	80 91 39 01 	lds	r24, 0x0139
     d6a:	99 27       	eor	r25, r25
     d6c:	81 ff       	sbrs	r24, 1
     d6e:	3d cf       	rjmp	.-390    	; 0xbea
     d70:	83 ff       	sbrs	r24, 3
     d72:	3b cf       	rjmp	.-394    	; 0xbea
     d74:	86 e0       	ldi	r24, 0x06	; 6
     d76:	12 c0       	rjmp	.+36     	; 0xd9c
     d78:	80 91 93 00 	lds	r24, 0x0093
     d7c:	8e 31       	cpi	r24, 0x1E	; 30
     d7e:	b0 f4       	brcc	.+44     	; 0xdac
     d80:	80 91 3f 01 	lds	r24, 0x013F
     d84:	90 91 40 01 	lds	r25, 0x0140
     d88:	c2 97       	sbiw	r24, 0x32	; 50
     d8a:	20 91 3d 01 	lds	r18, 0x013D
     d8e:	30 91 3e 01 	lds	r19, 0x013E
     d92:	82 17       	cp	r24, r18
     d94:	93 07       	cpc	r25, r19
     d96:	08 f0       	brcs	.+2      	; 0xd9a
     d98:	28 cf       	rjmp	.-432    	; 0xbea
     d9a:	87 e0       	ldi	r24, 0x07	; 7
     d9c:	80 93 9d 00 	sts	0x009D, r24
     da0:	08 95       	ret
     da2:	10 92 9d 00 	sts	0x009D, r1
     da6:	df cf       	rjmp	.-66     	; 0xd66
     da8:	85 e0       	ldi	r24, 0x05	; 5
     daa:	f8 cf       	rjmp	.-16     	; 0xd9c
     dac:	10 92 9d 00 	sts	0x009D, r1
     db0:	e7 cf       	rjmp	.-50     	; 0xd80
     db2:	10 92 9d 00 	sts	0x009D, r1
     db6:	c6 cf       	rjmp	.-116    	; 0xd44
     db8:	10 92 9d 00 	sts	0x009D, r1
     dbc:	89 cf       	rjmp	.-238    	; 0xcd0
     dbe:	10 92 9d 00 	sts	0x009D, r1
     dc2:	aa cf       	rjmp	.-172    	; 0xd18
     dc4:	88 ec       	ldi	r24, 0xC8	; 200
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	90 93 0f 01 	sts	0x010F, r25
     dcc:	80 93 0e 01 	sts	0x010E, r24
     dd0:	08 95       	ret
     dd2:	08 95       	ret

00000dd4 <ControlK>:
	break;
	default:break;
		}
    }


void    ControlK(void)
    {



	switch(RegimWork)
     dd4:	80 91 9d 00 	lds	r24, 0x009D
     dd8:	99 27       	eor	r25, r25
     dda:	aa 27       	eor	r26, r26
     ddc:	bb 27       	eor	r27, r27
     dde:	fc 01       	movw	r30, r24
     de0:	08 97       	sbiw	r24, 0x08	; 8
     de2:	50 f5       	brcc	.+84     	; 0xe38
     de4:	eb 5d       	subi	r30, 0xDB	; 219
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	09 94       	ijmp
		{
	case 0:
	PORTC |=0x20;
	PORTC &=0xbf;//Q=off
	PORTC |=8;//K5=off
	PORTC |=4;//K4,6=off
	PORTC |=0x10;//K7=off
	PORTC |=0x80;//Moto=off
	break;
	case 1:
	PORTC |=0x40;
	PORTC &=0xdf;//Q=on
	break;
	case 2:
	PORTC |=0x40;
	PORTC |=0x20;//Q on=off;
	PORTC |=4;//K4,6=off
	PORTC &=0xf7;//K5=on
	break;
	case 3:
	PORTC |=0x40;

	PORTC |=8;//K5=off

	break;
	case 4:
	PORTC |=8;//K5=off
	break;
	case 5:
	PORTC |=0x40;

	PORTC |=8;//K5=off
	PORTC &=0xfb;//K4,K6=on
	if((RegSPCH2 & 8)||(RegStop>=9))
	PORTC |=0x10;//K7=off
	else if((RegSPCH2 & 4)&&(!RegStop)&&(U400Out<100))
	PORTC &=0xef;//K7=on
	else if(NumberBlok==1)
		{
	if((RomReceiveRS[1][6] & 0x10)&&(!RegStop)&&(U400Out<100))
	PORTC &=0xef;//K7=on
		}
	else if(NumberBlok==4)
		{
	if((RomReceiveRS[1][3] & 0x10)&&(!RegStop)&&(U400Out<100))
	PORTC &=0xef;//K7=on
		}


	PORTC &=0x7f;//Moto=on
	break;
	case 6:
	PORTC |=0x40;

	PORTC |=8;//K5=off
	PORTC &=0xfb;//K4,K6=on
	if((RegSPCH2 & 8)||(RegStop>=9))
	PORTC |=0x10;//K7=off
	else if((RegSPCH2 & 4)&&(!RegStop) &&(U400Out<100))
	PORTC &=0xef;//K7=on
	else if(NumberBlok==1)
		{
	if((RomReceiveRS[1][6] & 0x10)&&(!RegStop)&&(U400Out<100))
	PORTC &=0xef;//K7=on
		}
	else if(NumberBlok==4)
		{
	if((RomReceiveRS[1][3] & 0x10)&&(!RegStop)&&(U400Out<100))
	PORTC &=0xef;//K7=on
		}


	PORTC &=0x7f;//Moto=on
	break;
	case 7:

	if(RegSPCH2 & 8)
     dea:	80 91 c5 00 	lds	r24, 0x00C5
     dee:	90 91 c6 00 	lds	r25, 0x00C6
     df2:	83 fd       	sbrc	r24, 3
     df4:	65 c0       	rjmp	.+202    	; 0xec0
	PORTC |=0x10;//K7=off
	else if((RegSPCH2 & 4)&&(U400Out<100))
     df6:	82 ff       	sbrs	r24, 2
     df8:	07 c0       	rjmp	.+14     	; 0xe08
     dfa:	80 91 7b 01 	lds	r24, 0x017B
     dfe:	90 91 7c 01 	lds	r25, 0x017C
     e02:	84 36       	cpi	r24, 0x64	; 100
     e04:	91 05       	cpc	r25, r1
     e06:	b0 f0       	brcs	.+44     	; 0xe34
	PORTC &=0xef;//K7=on
	else if(NumberBlok==1)
     e08:	80 91 b9 00 	lds	r24, 0x00B9
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	09 f4       	brne	.+2      	; 0xe12
     e10:	5d c0       	rjmp	.+186    	; 0xecc
		{
	if((RomReceiveRS[1][6] & 0x10)&&(!RegStop)&&(U400Out<100))
	PORTC &=0xef;//K7=on
		}
	else if(NumberBlok==4)
     e12:	84 30       	cpi	r24, 0x04	; 4
     e14:	81 f4       	brne	.+32     	; 0xe36
		{
	if((RomReceiveRS[1][3] & 0x10)&&(!RegStop)&&(U400Out<100))
     e16:	80 91 db 00 	lds	r24, 0x00DB
     e1a:	84 ff       	sbrs	r24, 4
     e1c:	0c c0       	rjmp	.+24     	; 0xe36
     e1e:	80 91 92 00 	lds	r24, 0x0092
     e22:	88 23       	and	r24, r24
     e24:	41 f4       	brne	.+16     	; 0xe36
     e26:	80 91 7b 01 	lds	r24, 0x017B
     e2a:	90 91 7c 01 	lds	r25, 0x017C
     e2e:	84 36       	cpi	r24, 0x64	; 100
     e30:	91 05       	cpc	r25, r1
     e32:	08 f4       	brcc	.+2      	; 0xe36
	PORTC &=0xef;//K7=on
     e34:	ac 98       	cbi	0x15, 4	; 21
		}



	PORTC &=0x7f;//Moto=on
     e36:	af 98       	cbi	0x15, 7	; 21
     e38:	08 95       	ret
     e3a:	ae 9a       	sbi	0x15, 6	; 21
     e3c:	ab 9a       	sbi	0x15, 3	; 21
     e3e:	aa 98       	cbi	0x15, 2	; 21
     e40:	80 91 c5 00 	lds	r24, 0x00C5
     e44:	90 91 c6 00 	lds	r25, 0x00C6
     e48:	83 fd       	sbrc	r24, 3
     e4a:	37 c0       	rjmp	.+110    	; 0xeba
     e4c:	20 91 92 00 	lds	r18, 0x0092
     e50:	29 30       	cpi	r18, 0x09	; 9
     e52:	98 f5       	brcc	.+102    	; 0xeba
     e54:	82 ff       	sbrs	r24, 2
     e56:	09 c0       	rjmp	.+18     	; 0xe6a
     e58:	22 23       	and	r18, r18
     e5a:	39 f4       	brne	.+14     	; 0xe6a
     e5c:	80 91 7b 01 	lds	r24, 0x017B
     e60:	90 91 7c 01 	lds	r25, 0x017C
     e64:	84 36       	cpi	r24, 0x64	; 100
     e66:	91 05       	cpc	r25, r1
     e68:	98 f0       	brcs	.+38     	; 0xe90
     e6a:	80 91 b9 00 	lds	r24, 0x00B9
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	51 f1       	breq	.+84     	; 0xec6
     e72:	84 30       	cpi	r24, 0x04	; 4
     e74:	71 f4       	brne	.+28     	; 0xe92
     e76:	80 91 db 00 	lds	r24, 0x00DB
     e7a:	84 ff       	sbrs	r24, 4
     e7c:	0a c0       	rjmp	.+20     	; 0xe92
     e7e:	22 23       	and	r18, r18
     e80:	41 f4       	brne	.+16     	; 0xe92
     e82:	80 91 7b 01 	lds	r24, 0x017B
     e86:	90 91 7c 01 	lds	r25, 0x017C
     e8a:	84 36       	cpi	r24, 0x64	; 100
     e8c:	91 05       	cpc	r25, r1
     e8e:	08 f4       	brcc	.+2      	; 0xe92
     e90:	ac 98       	cbi	0x15, 4	; 21
     e92:	af 98       	cbi	0x15, 7	; 21
     e94:	08 95       	ret
     e96:	ae 9a       	sbi	0x15, 6	; 21
     e98:	ab 9a       	sbi	0x15, 3	; 21
     e9a:	08 95       	ret
     e9c:	ad 9a       	sbi	0x15, 5	; 21
     e9e:	ae 98       	cbi	0x15, 6	; 21
     ea0:	ab 9a       	sbi	0x15, 3	; 21
     ea2:	aa 9a       	sbi	0x15, 2	; 21
     ea4:	ac 9a       	sbi	0x15, 4	; 21
     ea6:	af 9a       	sbi	0x15, 7	; 21
     ea8:	08 95       	ret
     eaa:	ae 9a       	sbi	0x15, 6	; 21
     eac:	ad 98       	cbi	0x15, 5	; 21
     eae:	08 95       	ret
     eb0:	ae 9a       	sbi	0x15, 6	; 21
     eb2:	ad 9a       	sbi	0x15, 5	; 21
     eb4:	aa 9a       	sbi	0x15, 2	; 21
     eb6:	ab 98       	cbi	0x15, 3	; 21
     eb8:	08 95       	ret
     eba:	ac 9a       	sbi	0x15, 4	; 21
     ebc:	af 98       	cbi	0x15, 7	; 21
     ebe:	08 95       	ret
     ec0:	ac 9a       	sbi	0x15, 4	; 21
     ec2:	af 98       	cbi	0x15, 7	; 21
     ec4:	b9 cf       	rjmp	.-142    	; 0xe38
     ec6:	80 91 de 00 	lds	r24, 0x00DE
     eca:	d7 cf       	rjmp	.-82     	; 0xe7a
     ecc:	80 91 de 00 	lds	r24, 0x00DE
     ed0:	a4 cf       	rjmp	.-184    	; 0xe1a
     ed2:	08 95       	ret

00000ed4 <ControlKDU>:
	break;

	default:break;
		}
    }
void    ControlKDU(void)
    {

	switch(RegimWork)
     ed4:	80 91 9d 00 	lds	r24, 0x009D
     ed8:	99 27       	eor	r25, r25
     eda:	aa 27       	eor	r26, r26
     edc:	bb 27       	eor	r27, r27
     ede:	fc 01       	movw	r30, r24
     ee0:	08 97       	sbiw	r24, 0x08	; 8
     ee2:	a8 f5       	brcc	.+106    	; 0xf4e
     ee4:	e3 5d       	subi	r30, 0xD3	; 211
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	09 94       	ijmp
		{
	case 0:
	PORTC |=0x20;
	PORTC &=0xbf;//Q=off
	PORTC |=8;//K5=off
	PORTC |=4;//K4,6=off
	PORTC |=0x10;//K7=off
	PORTC |=0x80;//Moto=off
	break;
	case 1:

	PORTC |=0x40;
	PORTC &=0xdf;//Q=on
	break;
	case 2:
	PORTC |=0x40;
	PORTC |=0x20;//Q on=off;
	PORTC |=4;//K4,6=off
	PORTC &=0xf7;//K5=on
	break;
	case 3:
	PORTC |=0x40;

	PORTC |=8;//K5=off

	break;
	case 4:
	PORTC |=8;//K5=off
	break;
	case 5:
	PORTC |=0x40;

	PORTC |=8;//K5=off
	PORTC &=0xfb;//K4,K6=on

	PORTC &=0x7f;//Moto=on
	break;
	case 6:
	PORTC |=0x40;

	PORTC |=8;//K5=off
	PORTC &=0xfb;//K4,K6=on


	PORTC &=0x7f;//Moto=on
	break;
	case 7:

	if(RegStop1>=30)
     eea:	80 91 93 00 	lds	r24, 0x0093
     eee:	8e 31       	cpi	r24, 0x1E	; 30
     ef0:	08 f0       	brcs	.+2      	; 0xef4
     ef2:	45 c0       	rjmp	.+138    	; 0xf7e
	PORTC |=0x10;//K7=off
	else if((NumberBlok==4)&&(!(RomReceiveRS[1][0] & 4)))
     ef4:	80 91 b9 00 	lds	r24, 0x00B9
     ef8:	84 30       	cpi	r24, 0x04	; 4
     efa:	09 f4       	brne	.+2      	; 0xefe
     efc:	43 c0       	rjmp	.+134    	; 0xf84
     efe:	20 91 d8 00 	lds	r18, 0x00D8
	PORTC &=0xef;//K7=on
	else if((NumberBlok==1)&&(!(RomReceiveRS[1][0] & 8))&&(U400Out<100))
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	09 f4       	brne	.+2      	; 0xf08
     f06:	44 c0       	rjmp	.+136    	; 0xf90
	PORTC &=0xef;//K7=on
	else if((!(RomReceiveRS[1][0] & 1))&&(U400Out<100))
     f08:	20 fd       	sbrc	r18, 0
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a
     f0c:	80 91 7b 01 	lds	r24, 0x017B
     f10:	90 91 7c 01 	lds	r25, 0x017C
     f14:	84 36       	cpi	r24, 0x64	; 100
     f16:	91 05       	cpc	r25, r1
     f18:	c0 f0       	brcs	.+48     	; 0xf4a
	PORTC &=0xef;//K7=on
	else if((!(RomReceiveRS[1][0] & 2))&&(U400Out<100))
     f1a:	21 fd       	sbrc	r18, 1
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c
     f1e:	80 91 7b 01 	lds	r24, 0x017B
     f22:	90 91 7c 01 	lds	r25, 0x017C
     f26:	84 36       	cpi	r24, 0x64	; 100
     f28:	91 05       	cpc	r25, r1
     f2a:	78 f0       	brcs	.+30     	; 0xf4a
	PORTC &=0xef;//K7=on	
	else if((RomReceiveRS[1][6] & 2)&&(RomReceiveRS[1][3] & 2)&&(U400Out<100))
     f2c:	80 91 de 00 	lds	r24, 0x00DE
     f30:	81 ff       	sbrs	r24, 1
     f32:	0c c0       	rjmp	.+24     	; 0xf4c
     f34:	80 91 db 00 	lds	r24, 0x00DB
     f38:	81 ff       	sbrs	r24, 1
     f3a:	08 c0       	rjmp	.+16     	; 0xf4c
     f3c:	80 91 7b 01 	lds	r24, 0x017B
     f40:	90 91 7c 01 	lds	r25, 0x017C
     f44:	84 36       	cpi	r24, 0x64	; 100
     f46:	91 05       	cpc	r25, r1
     f48:	08 f4       	brcc	.+2      	; 0xf4c
	PORTC &=0xef;//K7=on		
     f4a:	ac 98       	cbi	0x15, 4	; 21
	PORTC &=0x7f;//Moto=on
     f4c:	af 98       	cbi	0x15, 7	; 21
     f4e:	08 95       	ret
     f50:	ae 9a       	sbi	0x15, 6	; 21
     f52:	ab 9a       	sbi	0x15, 3	; 21
     f54:	aa 98       	cbi	0x15, 2	; 21
     f56:	af 98       	cbi	0x15, 7	; 21
     f58:	08 95       	ret
     f5a:	ae 9a       	sbi	0x15, 6	; 21
     f5c:	ab 9a       	sbi	0x15, 3	; 21
     f5e:	08 95       	ret
     f60:	ad 9a       	sbi	0x15, 5	; 21
     f62:	ae 98       	cbi	0x15, 6	; 21
     f64:	ab 9a       	sbi	0x15, 3	; 21
     f66:	aa 9a       	sbi	0x15, 2	; 21
     f68:	ac 9a       	sbi	0x15, 4	; 21
     f6a:	af 9a       	sbi	0x15, 7	; 21
     f6c:	08 95       	ret
     f6e:	ae 9a       	sbi	0x15, 6	; 21
     f70:	ad 98       	cbi	0x15, 5	; 21
     f72:	08 95       	ret
     f74:	ae 9a       	sbi	0x15, 6	; 21
     f76:	ad 9a       	sbi	0x15, 5	; 21
     f78:	aa 9a       	sbi	0x15, 2	; 21
     f7a:	ab 98       	cbi	0x15, 3	; 21
     f7c:	08 95       	ret
     f7e:	ac 9a       	sbi	0x15, 4	; 21
     f80:	af 98       	cbi	0x15, 7	; 21
     f82:	e5 cf       	rjmp	.-54     	; 0xf4e
     f84:	20 91 d8 00 	lds	r18, 0x00D8
     f88:	22 fd       	sbrc	r18, 2
     f8a:	be cf       	rjmp	.-132    	; 0xf08
     f8c:	ac 98       	cbi	0x15, 4	; 21
     f8e:	de cf       	rjmp	.-68     	; 0xf4c
     f90:	23 fd       	sbrc	r18, 3
     f92:	ba cf       	rjmp	.-140    	; 0xf08
     f94:	80 91 7b 01 	lds	r24, 0x017B
     f98:	90 91 7c 01 	lds	r25, 0x017C
     f9c:	84 36       	cpi	r24, 0x64	; 100
     f9e:	91 05       	cpc	r25, r1
     fa0:	08 f0       	brcs	.+2      	; 0xfa4
     fa2:	b2 cf       	rjmp	.-156    	; 0xf08
     fa4:	ac 98       	cbi	0x15, 4	; 21
     fa6:	d2 cf       	rjmp	.-92     	; 0xf4c
     fa8:	08 95       	ret

00000faa <ResetAvaria>:
	break;

	default:break;
		}
    }


void    ResetAvaria(void)
    {
    unsigned char R0;
     Avaria=0;
     faa:	10 92 c7 01 	sts	0x01C7, r1
    RegimError=0;      
     fae:	10 92 c1 00 	sts	0x00C1, r1
     fb2:	27 e0       	ldi	r18, 0x07	; 7
     fb4:	a5 e9       	ldi	r26, 0x95	; 149
     fb6:	b1 e0       	ldi	r27, 0x01	; 1
     fb8:	e7 e7       	ldi	r30, 0x77	; 119
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     for(R0=0;R0<=7;++R0)
    CtError[R0]=CtError0[R0];
     fbc:	81 91       	ld	r24, Z+
     fbe:	91 91       	ld	r25, Z+
     fc0:	8d 93       	st	X+, r24
     fc2:	9d 93       	st	X+, r25
     fc4:	21 50       	subi	r18, 0x01	; 1
     fc6:	27 ff       	sbrs	r18, 7
     fc8:	f9 cf       	rjmp	.-14     	; 0xfbc
	AvariaI=0;
     fca:	10 92 a5 00 	sts	0x00A5, r1
     fce:	10 92 a4 00 	sts	0x00A4, r1
     fd2:	08 95       	ret

00000fd4 <ClearPoz>:
    }

   
    
    
         



void	ClearPoz(unsigned char R0)
{
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	18 2f       	mov	r17, r24
static unsigned const char  Tab[]="         ";


    unsigned char R2;
    unsigned char R3;

	for(R2=0;R2<=R0;++R2)
     fda:	c0 e0       	ldi	r28, 0x00	; 0
	{
    R3=Tab[R2];
     fdc:	ec 2f       	mov	r30, r28
     fde:	ff 27       	eor	r31, r31
     fe0:	e9 57       	subi	r30, 0x79	; 121
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    TransmitInd(R3);
     fe4:	80 81       	ld	r24, Z
     fe6:	3a da       	rcall	.-2956   	; 0x45c
     fe8:	cf 5f       	subi	r28, 0xFF	; 255
     fea:	1c 17       	cp	r17, r28
     fec:	b8 f7       	brcc	.-18     	; 0xfdc
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	08 95       	ret

00000ff4 <AccountU50>:
    }

}





	
 

 	


	
	
		


/*	void	ControlRegim(void)
	{
	if(!Regim)//all=off
		{
	if(RegSPCH2 & 1)//Pusk

 	
	}*/	

	void	AccountU50(void)
	{
	unsigned int R0;
	R0=AdResult[1];
     ff4:	20 91 a7 01 	lds	r18, 0x01A7
     ff8:	30 91 a8 01 	lds	r19, 0x01A8

	if(R0>U50)
     ffc:	80 91 b9 01 	lds	r24, 0x01B9
    1000:	90 91 ba 01 	lds	r25, 0x01BA
    1004:	82 17       	cp	r24, r18
    1006:	93 07       	cpc	r25, r19
    1008:	30 f4       	brcc	.+12     	; 0x1016
	++U50;
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	90 93 ba 01 	sts	0x01BA, r25
    1010:	80 93 b9 01 	sts	0x01B9, r24
    1014:	08 95       	ret
	else if(R0<U50)
    1016:	28 17       	cp	r18, r24
    1018:	39 07       	cpc	r19, r25
    101a:	28 f4       	brcc	.+10     	; 0x1026
	--U50;
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	90 93 ba 01 	sts	0x01BA, r25
    1022:	80 93 b9 01 	sts	0x01B9, r24
    1026:	08 95       	ret
    1028:	08 95       	ret

0000102a <AccountI50>:

	}
	void	AccountI50(void)
	{
	unsigned int R0;
	R0=AdResult[7];
    102a:	20 91 b3 01 	lds	r18, 0x01B3
    102e:	30 91 b4 01 	lds	r19, 0x01B4
	if(R0>I50)
    1032:	80 91 30 01 	lds	r24, 0x0130
    1036:	90 91 31 01 	lds	r25, 0x0131
    103a:	82 17       	cp	r24, r18
    103c:	93 07       	cpc	r25, r19
    103e:	30 f4       	brcc	.+12     	; 0x104c
	++I50;
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	90 93 31 01 	sts	0x0131, r25
    1046:	80 93 30 01 	sts	0x0130, r24
    104a:	08 95       	ret
	else if(R0<I50)
    104c:	28 17       	cp	r18, r24
    104e:	39 07       	cpc	r19, r25
    1050:	28 f4       	brcc	.+10     	; 0x105c
	--I50;
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	90 93 31 01 	sts	0x0131, r25
    1058:	80 93 30 01 	sts	0x0130, r24
    105c:	08 95       	ret
    105e:	08 95       	ret

00001060 <CalcI50>:
	}
	void CalcI50(void)
	{
	unsigned int R0;
	R0=AdResult[7];
    1060:	20 91 b3 01 	lds	r18, 0x01B3
    1064:	30 91 b4 01 	lds	r19, 0x01B4
	if(R0>I500)
    1068:	40 91 03 01 	lds	r20, 0x0103
    106c:	84 2f       	mov	r24, r20
    106e:	99 27       	eor	r25, r25
    1070:	82 17       	cp	r24, r18
    1072:	93 07       	cpc	r25, r19
    1074:	70 f4       	brcc	.+28     	; 0x1092
		{
	CtMinusI50=200;
    1076:	88 ec       	ldi	r24, 0xC8	; 200
    1078:	80 93 c2 00 	sts	0x00C2, r24

	if(CtPlusI50)
    107c:	80 91 98 00 	lds	r24, 0x0098
    1080:	88 23       	and	r24, r24
    1082:	e1 f4       	brne	.+56     	; 0x10bc
	--CtPlusI50;
	else
			{
	++I500;
    1084:	4f 5f       	subi	r20, 0xFF	; 255
    1086:	40 93 03 01 	sts	0x0103, r20
	CtPlusI50=2;
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	80 93 98 00 	sts	0x0098, r24
    1090:	08 95       	ret
			}
		}
	else if(R0<I500)
    1092:	28 17       	cp	r18, r24
    1094:	39 07       	cpc	r19, r25
    1096:	88 f4       	brcc	.+34     	; 0x10ba
		{
	CtPlusI50=200;
    1098:	88 ec       	ldi	r24, 0xC8	; 200
    109a:	80 93 98 00 	sts	0x0098, r24

	if(CtMinusI50)
    109e:	80 91 c2 00 	lds	r24, 0x00C2
    10a2:	88 23       	and	r24, r24
    10a4:	21 f0       	breq	.+8      	; 0x10ae
	--CtMinusI50;
    10a6:	81 50       	subi	r24, 0x01	; 1
    10a8:	80 93 c2 00 	sts	0x00C2, r24
    10ac:	08 95       	ret
	else
			{
	CtMinusI50=2;
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	80 93 c2 00 	sts	0x00C2, r24
	--I500;
    10b4:	41 50       	subi	r20, 0x01	; 1
    10b6:	40 93 03 01 	sts	0x0103, r20
    10ba:	08 95       	ret
    10bc:	81 50       	subi	r24, 0x01	; 1
    10be:	80 93 98 00 	sts	0x0098, r24
    10c2:	08 95       	ret
    10c4:	08 95       	ret

000010c6 <AccountU400In>:
			}
		}
							
	}		
	


	void	AccountU400In(void)
	{
	unsigned int R0;
	R0=AdResult[2];
    10c6:	40 91 a9 01 	lds	r20, 0x01A9
    10ca:	50 91 aa 01 	lds	r21, 0x01AA
	if(R0>U400In)
    10ce:	20 91 3d 01 	lds	r18, 0x013D
    10d2:	30 91 3e 01 	lds	r19, 0x013E
    10d6:	24 17       	cp	r18, r20
    10d8:	35 07       	cpc	r19, r21
    10da:	50 f4       	brcc	.+20     	; 0x10f0
		{
	if(R0>(U400In+50))
    10dc:	c9 01       	movw	r24, r18
    10de:	c2 96       	adiw	r24, 0x32	; 50
    10e0:	84 17       	cp	r24, r20
    10e2:	95 07       	cpc	r25, r21
    10e4:	a0 f4       	brcc	.+40     	; 0x110e
	U400In=R0;
	else
	++U400In;
		}
	else if(R0<U400In)
		{
	if(R0<(U400In-50))
	U400In=R0;
    10e6:	50 93 3e 01 	sts	0x013E, r21
    10ea:	40 93 3d 01 	sts	0x013D, r20
    10ee:	08 95       	ret
    10f0:	42 17       	cp	r20, r18
    10f2:	53 07       	cpc	r21, r19
    10f4:	58 f4       	brcc	.+22     	; 0x110c
    10f6:	c9 01       	movw	r24, r18
    10f8:	c2 97       	sbiw	r24, 0x32	; 50
    10fa:	48 17       	cp	r20, r24
    10fc:	59 07       	cpc	r21, r25
    10fe:	98 f3       	brcs	.-26     	; 0x10e6
	else
	--U400In;
    1100:	21 50       	subi	r18, 0x01	; 1
    1102:	30 40       	sbci	r19, 0x00	; 0
    1104:	30 93 3e 01 	sts	0x013E, r19
    1108:	20 93 3d 01 	sts	0x013D, r18
    110c:	08 95       	ret
    110e:	2f 5f       	subi	r18, 0xFF	; 255
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	30 93 3e 01 	sts	0x013E, r19
    1116:	20 93 3d 01 	sts	0x013D, r18
    111a:	08 95       	ret
    111c:	08 95       	ret

0000111e <AccountU400Out>:
		}
	}
	void	AccountU400Out(void)
	{
	unsigned int R0;
	R0=AdResult[3];
    111e:	40 91 ab 01 	lds	r20, 0x01AB
    1122:	50 91 ac 01 	lds	r21, 0x01AC
	if(R0>U400Out)
    1126:	20 91 7b 01 	lds	r18, 0x017B
    112a:	30 91 7c 01 	lds	r19, 0x017C
    112e:	24 17       	cp	r18, r20
    1130:	35 07       	cpc	r19, r21
    1132:	50 f4       	brcc	.+20     	; 0x1148
		{
	if(R0>(U400Out+50))
    1134:	c9 01       	movw	r24, r18
    1136:	c2 96       	adiw	r24, 0x32	; 50
    1138:	84 17       	cp	r24, r20
    113a:	95 07       	cpc	r25, r21
    113c:	a0 f4       	brcc	.+40     	; 0x1166
	U400Out=R0;
	else
	++U400Out;
		}
	else if(R0<U400Out)
		{
	if(R0<(U400Out-50))
	U400Out=R0;
    113e:	50 93 7c 01 	sts	0x017C, r21
    1142:	40 93 7b 01 	sts	0x017B, r20
    1146:	08 95       	ret
    1148:	42 17       	cp	r20, r18
    114a:	53 07       	cpc	r21, r19
    114c:	58 f4       	brcc	.+22     	; 0x1164
    114e:	c9 01       	movw	r24, r18
    1150:	c2 97       	sbiw	r24, 0x32	; 50
    1152:	48 17       	cp	r20, r24
    1154:	59 07       	cpc	r21, r25
    1156:	98 f3       	brcs	.-26     	; 0x113e
	else
	--U400Out;
    1158:	21 50       	subi	r18, 0x01	; 1
    115a:	30 40       	sbci	r19, 0x00	; 0
    115c:	30 93 7c 01 	sts	0x017C, r19
    1160:	20 93 7b 01 	sts	0x017B, r18
    1164:	08 95       	ret
    1166:	2f 5f       	subi	r18, 0xFF	; 255
    1168:	3f 4f       	sbci	r19, 0xFF	; 255
    116a:	30 93 7c 01 	sts	0x017C, r19
    116e:	20 93 7b 01 	sts	0x017B, r18
    1172:	08 95       	ret
    1174:	08 95       	ret

00001176 <AccountIA>:
		}
	}


	void	AccountIA(void)
	{
	unsigned int R0;
	R0=AdResult[4];
    1176:	80 91 ad 01 	lds	r24, 0x01AD
    117a:	90 91 ae 01 	lds	r25, 0x01AE
	if(R0>IA)
	++IA;
	else if(R0<IA)
	--IA;
	IA=R0;
    117e:	90 93 05 01 	sts	0x0105, r25
    1182:	80 93 04 01 	sts	0x0104, r24
    1186:	08 95       	ret

00001188 <AccountIB>:
	}
	void	AccountIB(void)
	{
	unsigned int R0;
	R0=AdResult[5];
    1188:	80 91 af 01 	lds	r24, 0x01AF
    118c:	90 91 b0 01 	lds	r25, 0x01B0
	if(R0>IB)
	++IB;
	else if(R0<IB)
	--IB;
	IB=R0;
    1190:	90 93 82 01 	sts	0x0182, r25
    1194:	80 93 81 01 	sts	0x0181, r24
    1198:	08 95       	ret

0000119a <AccountIC>:
	}
	void	AccountIC(void)
	{
	unsigned int R0;
	R0=AdResult[6];
    119a:	80 91 b1 01 	lds	r24, 0x01B1
    119e:	90 91 b2 01 	lds	r25, 0x01B2
	if(R0>IC)
	++IC;
	else if(R0<IC)
	--IC;
	IC=R0;
    11a2:	90 93 12 01 	sts	0x0112, r25
    11a6:	80 93 11 01 	sts	0x0111, r24
    11aa:	08 95       	ret

000011ac <ClearErrorFar>:
	}
 void	ClearErrorFar(void)
 {
    11ac:	92 e3       	ldi	r25, 0x32	; 50
    11ae:	e7 e0       	ldi	r30, 0x07	; 7
    11b0:	f1 e0       	ldi	r31, 0x01	; 1
    11b2:	86 e0       	ldi	r24, 0x06	; 6
	unsigned char R0;
	for(R0=0;R0<=6;++R0)
 	{
	CtErrorFar[R0]=50;
    11b4:	91 93       	st	Z+, r25
    11b6:	81 50       	subi	r24, 0x01	; 1
    11b8:	87 ff       	sbrs	r24, 7
    11ba:	fc cf       	rjmp	.-8      	; 0x11b4
    11bc:	10 92 16 01 	sts	0x0116, r1
    11c0:	08 95       	ret

000011c2 <main>:
	ErrorFar=0;
	}

 }
							   
/*++++++++++++++++++++++++++++++++++++++++++*/


    int main(void)
    {
    11c2:	cf e5       	ldi	r28, 0x5F	; 95
    11c4:	d2 e0       	ldi	r29, 0x02	; 2
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	cd bf       	out	0x3d, r28	; 61
	DDRA=0;
    11ca:	1a ba       	out	0x1a, r1	; 26
	PORTA=0;
    11cc:	1b ba       	out	0x1b, r1	; 27
 
    DDRB=0xa0;
    11ce:	80 ea       	ldi	r24, 0xA0	; 160
    11d0:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0xff;
    11d2:	88 b3       	in	r24, 0x18	; 24
    11d4:	9f ef       	ldi	r25, 0xFF	; 255
    11d6:	98 bb       	out	0x18, r25	; 24

    DDRC=0xfc;
    11d8:	8c ef       	ldi	r24, 0xFC	; 252
    11da:	84 bb       	out	0x14, r24	; 20
    PORTC |=0xff;
    11dc:	85 b3       	in	r24, 0x15	; 21
    11de:	95 bb       	out	0x15, r25	; 21

    DDRD=0x2a;
    11e0:	8a e2       	ldi	r24, 0x2A	; 42
    11e2:	81 bb       	out	0x11, r24	; 17
    PORTD=0xf7;
    11e4:	87 ef       	ldi	r24, 0xF7	; 247
    11e6:	82 bb       	out	0x12, r24	; 18

//INIT TWI;
    TWBR=0x7f;//F TWI
    11e8:	8f e7       	ldi	r24, 0x7F	; 127
    11ea:	80 b9       	out	0x00, r24	; 0
    CtStart=65000;
	while(CtStart--)	_WDR();
    11ec:	27 ee       	ldi	r18, 0xE7	; 231
    11ee:	3d ef       	ldi	r19, 0xFD	; 253
    11f0:	a8 95       	wdr
    11f2:	c9 01       	movw	r24, r18
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	9c 01       	movw	r18, r24
    11f8:	4f ef       	ldi	r20, 0xFF	; 255
    11fa:	8f 3f       	cpi	r24, 0xFF	; 255
    11fc:	94 07       	cpc	r25, r20
    11fe:	c1 f7       	brne	.-16     	; 0x11f0
    1200:	90 93 44 01 	sts	0x0144, r25
    1204:	80 93 43 01 	sts	0x0143, r24
//Init capture1
    TCCR1B=0x82;//0.5mkc,falling edge
    1208:	82 e8       	ldi	r24, 0x82	; 130
    120a:	8e bd       	out	0x2e, r24	; 46
    TIMSK=TIMSK | 0x4;//enable Int overlowT1
    120c:	89 b7       	in	r24, 0x39	; 57
    120e:	84 60       	ori	r24, 0x04	; 4
    1210:	89 bf       	out	0x39, r24	; 57
//    TIMSK=TIMSK | 0x20;//enable Int capture1 prov

//INIT USART
	InitUsart();
    1212:	4e d7       	rcall	.+3740   	; 0x20b0

//  INIT SPI
    SPCR=0x72;//f/64
    1214:	82 e7       	ldi	r24, 0x72	; 114
    1216:	8d b9       	out	0x0d, r24	; 13
    SPSR=0;//f/64
    1218:	1e b8       	out	0x0e, r1	; 14



    InitAd();
    121a:	7b d8       	rcall	.-3850   	; 0x312
    TCCR1B=0xc2;//0.5mkc
    121c:	82 ec       	ldi	r24, 0xC2	; 194
    121e:	8e bd       	out	0x2e, r24	; 46
    TIMSK=TIMSK | 0x4;//enable Int overlowT1
    1220:	89 b7       	in	r24, 0x39	; 57
    1222:	84 60       	ori	r24, 0x04	; 4
    1224:	89 bf       	out	0x39, r24	; 57




 
    ResetAvaria();
    1226:	c1 de       	rcall	.-638    	; 0xfaa


	RomReceive[4]=0;
    1228:	10 92 1c 01 	sts	0x011C, r1
	RomReceive[6]=0;
    122c:	10 92 1e 01 	sts	0x011E, r1

	RegSPCH2=0;
    1230:	10 92 c6 00 	sts	0x00C6, r1
    1234:	10 92 c5 00 	sts	0x00C5, r1
	RegSPCH2Old=0;
    1238:	10 92 06 01 	sts	0x0106, r1
	CtKn=5;
    123c:	85 e0       	ldi	r24, 0x05	; 5
    123e:	80 93 cf 00 	sts	0x00CF, r24
	RegimWork=0;
    1242:	10 92 9d 00 	sts	0x009D, r1
	U50=0;
    1246:	10 92 ba 01 	sts	0x01BA, r1
    124a:	10 92 b9 01 	sts	0x01B9, r1
	I50=200;
    124e:	88 ec       	ldi	r24, 0xC8	; 200
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	90 93 31 01 	sts	0x0131, r25
    1256:	80 93 30 01 	sts	0x0130, r24
	U400In=0;
    125a:	10 92 3e 01 	sts	0x013E, r1
    125e:	10 92 3d 01 	sts	0x013D, r1
	U400Out=0;
    1262:	10 92 7c 01 	sts	0x017C, r1
    1266:	10 92 7b 01 	sts	0x017B, r1
	IA=0;
    126a:	10 92 05 01 	sts	0x0105, r1
    126e:	10 92 04 01 	sts	0x0104, r1
	IB=0;
    1272:	10 92 82 01 	sts	0x0182, r1
    1276:	10 92 81 01 	sts	0x0181, r1
	IC=0;
    127a:	10 92 12 01 	sts	0x0112, r1
    127e:	10 92 11 01 	sts	0x0111, r1
	CtUsart=NumberBlok;
    1282:	80 91 b9 00 	lds	r24, 0x00B9
    1286:	80 93 92 01 	sts	0x0192, r24
	RegTransmitRS[1]=0;
    128a:	10 92 22 01 	sts	0x0122, r1
	CtLuk=200;
    128e:	88 ec       	ldi	r24, 0xC8	; 200
    1290:	80 93 94 00 	sts	0x0094, r24
    _SEI();
    1294:	78 94       	sei
	CtBegin=50;
    1296:	82 e3       	ldi	r24, 0x32	; 50
    1298:	80 93 88 01 	sts	0x0188, r24
	RomReceiveRS[3][1]=0;//denablePusk
    129c:	10 92 e7 00 	sts	0x00E7, r1
	RomReceiveRS[3][4]=0;//denablePusk
    12a0:	10 92 ea 00 	sts	0x00EA, r1
	RegTransmitRS[3]=0;	
    12a4:	10 92 24 01 	sts	0x0124, r1
	RegTransmitRS[1]=0;
	ClearErrorFar();
    12a8:	81 df       	rcall	.-254    	; 0x11ac
	CtIMax=80;
    12aa:	80 e5       	ldi	r24, 0x50	; 80
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	90 93 36 01 	sts	0x0136, r25
    12b2:	80 93 35 01 	sts	0x0135, r24
	CtUError=160;
    12b6:	80 ea       	ldi	r24, 0xA0	; 160
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	90 93 a8 00 	sts	0x00A8, r25
    12be:	80 93 a7 00 	sts	0x00A7, r24
	AvariaI=0;
    12c2:	10 92 a5 00 	sts	0x00A5, r1
    12c6:	10 92 a4 00 	sts	0x00A4, r1
	RegStop=0;								             
    12ca:	10 92 92 00 	sts	0x0092, r1
     while(1)
    {

     _WDR();
    12ce:	a8 95       	wdr
	 if(CtBegin)
    12d0:	80 91 88 01 	lds	r24, 0x0188
    12d4:	88 23       	and	r24, r24
    12d6:	39 f0       	breq	.+14     	; 0x12e6
	 	{
	if(RomReceive[3] & 2)
    12d8:	80 91 1b 01 	lds	r24, 0x011B
    12dc:	81 ff       	sbrs	r24, 1
    12de:	16 c1       	rjmp	.+556    	; 0x150c
	NumberBlok=4;
    12e0:	84 e0       	ldi	r24, 0x04	; 4
	else
	NumberBlok=1;
    12e2:	80 93 b9 00 	sts	0x00B9, r24
		}
//	if(RomReceiveRS[4][0] & 2)
	UMin=385;
    12e6:	81 e8       	ldi	r24, 0x81	; 129
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	90 93 40 01 	sts	0x0140, r25
    12ee:	80 93 3f 01 	sts	0x013F, r24
//	else
//	UMin=810;
	if(RegimWork>=6)
    12f2:	80 91 9d 00 	lds	r24, 0x009D
    12f6:	86 30       	cpi	r24, 0x06	; 6
    12f8:	08 f4       	brcc	.+2      	; 0x12fc
    12fa:	fc c0       	rjmp	.+504    	; 0x14f4
		{
	if((U400In>=UMin) && (U400In<=1010))
    12fc:	80 91 3d 01 	lds	r24, 0x013D
    1300:	90 91 3e 01 	lds	r25, 0x013E
    1304:	21 e0       	ldi	r18, 0x01	; 1
    1306:	81 38       	cpi	r24, 0x81	; 129
    1308:	92 07       	cpc	r25, r18
    130a:	48 f0       	brcs	.+18     	; 0x131e
    130c:	83 5f       	subi	r24, 0xF3	; 243
    130e:	93 40       	sbci	r25, 0x03	; 3
    1310:	30 f4       	brcc	.+12     	; 0x131e
	CtUError=160;
    1312:	80 ea       	ldi	r24, 0xA0	; 160
    1314:	90 e0       	ldi	r25, 0x00	; 0
		}
	else
	CtUError=80;
    1316:	90 93 a8 00 	sts	0x00A8, r25
    131a:	80 93 a7 00 	sts	0x00A7, r24
	if(RomReceiveRS[5][3] & 4)
    131e:	80 91 f7 00 	lds	r24, 0x00F7
    1322:	82 fd       	sbrc	r24, 2
    1324:	f0 c0       	rjmp	.+480    	; 0x1506
		{
	ResetAvaria();
	ClearErrorFar();
		}
	if((RomReceiveRS[5][6] & 4)||(RomReceive[4] & 0x80))
    1326:	80 91 fa 00 	lds	r24, 0x00FA
    132a:	82 fd       	sbrc	r24, 2
    132c:	04 c0       	rjmp	.+8      	; 0x1336
    132e:	40 91 1c 01 	lds	r20, 0x011C
    1332:	44 23       	and	r20, r20
    1334:	24 f4       	brge	.+8      	; 0x133e
		{
	ResetAvaria();
    1336:	39 de       	rcall	.-910    	; 0xfaa
	ClearErrorFar();
    1338:	39 df       	rcall	.-398    	; 0x11ac
    133a:	40 91 1c 01 	lds	r20, 0x011C
		}
	if((Avaria)||(AvariaI))
    133e:	20 91 c7 01 	lds	r18, 0x01C7
    1342:	22 23       	and	r18, r18
    1344:	39 f4       	brne	.+14     	; 0x1354
    1346:	80 91 a4 00 	lds	r24, 0x00A4
    134a:	90 91 a5 00 	lds	r25, 0x00A5
    134e:	89 2b       	or	r24, r25
    1350:	09 f4       	brne	.+2      	; 0x1354
    1352:	de c0       	rjmp	.+444    	; 0x1510
	RegTransmitRS[1] |=1;
    1354:	80 91 22 01 	lds	r24, 0x0122
    1358:	81 60       	ori	r24, 0x01	; 1
	else
	RegTransmitRS[1] &=0xfe;
    135a:	80 93 22 01 	sts	0x0122, r24
	if(RegimWork==7)
    135e:	90 91 9d 00 	lds	r25, 0x009D
    1362:	97 30       	cpi	r25, 0x07	; 7
    1364:	09 f4       	brne	.+2      	; 0x1368
    1366:	c9 c0       	rjmp	.+402    	; 0x14fa
	RegTransmitRS[1] |=4;
	else
	RegTransmitRS[1] &=0xfb;
    1368:	80 91 22 01 	lds	r24, 0x0122
    136c:	8b 7f       	andi	r24, 0xFB	; 251
    136e:	80 93 22 01 	sts	0x0122, r24
	if((RegimWork)&&(!CtLuk))
    1372:	99 23       	and	r25, r25
    1374:	09 f4       	brne	.+2      	; 0x1378
    1376:	b7 c0       	rjmp	.+366    	; 0x14e6
    1378:	80 91 94 00 	lds	r24, 0x0094
    137c:	88 23       	and	r24, r24
    137e:	09 f0       	breq	.+2      	; 0x1382
    1380:	b2 c0       	rjmp	.+356    	; 0x14e6
	RegTransmitRS[1] |=8;//Open Luk
    1382:	80 91 22 01 	lds	r24, 0x0122
    1386:	88 60       	ori	r24, 0x08	; 8
	else
	RegTransmitRS[1] &=0xf7;//Close Luk
    1388:	80 93 22 01 	sts	0x0122, r24

	if((RomReceive[5] & 1)&&(RegS & 0x10))
    138c:	80 91 1d 01 	lds	r24, 0x011D
    1390:	80 ff       	sbrs	r24, 0
    1392:	9c c0       	rjmp	.+312    	; 0x14cc
    1394:	90 91 39 01 	lds	r25, 0x0139
    1398:	94 ff       	sbrs	r25, 4
    139a:	9a c0       	rjmp	.+308    	; 0x14d0
	RegTransmitRS[1] |=0x10;
    139c:	80 91 22 01 	lds	r24, 0x0122
    13a0:	80 61       	ori	r24, 0x10	; 16
	else
	RegTransmitRS[1] &=0xef;
    13a2:	80 93 22 01 	sts	0x0122, r24
	if(RegS & 0x10)//nagr=on
    13a6:	94 ff       	sbrs	r25, 4
    13a8:	9a c0       	rjmp	.+308    	; 0x14de
	RegTransmitRS[1] |=0x20;
    13aa:	80 91 22 01 	lds	r24, 0x0122
    13ae:	80 62       	ori	r24, 0x20	; 32
	else
	RegTransmitRS[1] &=0xdf;
    13b0:	80 93 22 01 	sts	0x0122, r24

	RegTransmitRS[2]=RomReceiveRS[3][0];//Avaria;//RegS;//RegimError;//NumberBlok;//45;//U50;
    13b4:	80 91 e6 00 	lds	r24, 0x00E6
    13b8:	80 93 23 01 	sts	0x0123, r24

	RegTransmitRS[4]=U400In>>2;//RomReceive[2];//UNom
    13bc:	80 91 3d 01 	lds	r24, 0x013D
    13c0:	90 91 3e 01 	lds	r25, 0x013E
    13c4:	96 95       	lsr	r25
    13c6:	87 95       	ror	r24
    13c8:	96 95       	lsr	r25
    13ca:	87 95       	ror	r24
    13cc:	80 93 25 01 	sts	0x0125, r24
	RegTransmitRS[5]=Avaria;//46;//AdResult[1];
    13d0:	20 93 26 01 	sts	0x0126, r18
	RegTransmitRS[6]=TestTimeAd;//16;
    13d4:	80 91 a0 00 	lds	r24, 0x00A0
    13d8:	80 93 27 01 	sts	0x0127, r24

	RegSPCH2=RomReceive[3]<<8;
    13dc:	80 91 1b 01 	lds	r24, 0x011B
    13e0:	99 27       	eor	r25, r25
    13e2:	38 2f       	mov	r19, r24
    13e4:	22 27       	eor	r18, r18
	RegSPCH2 |=RomReceive[4];
    13e6:	84 2f       	mov	r24, r20
    13e8:	99 27       	eor	r25, r25
    13ea:	82 2b       	or	r24, r18
    13ec:	93 2b       	or	r25, r19
    13ee:	90 93 c6 00 	sts	0x00C6, r25
    13f2:	80 93 c5 00 	sts	0x00C5, r24
	AccountU50();
    13f6:	fe dd       	rcall	.-1028   	; 0xff4
	AccountI50();
    13f8:	18 de       	rcall	.-976    	; 0x102a
	CalcI50();
    13fa:	32 de       	rcall	.-924    	; 0x1060
	AccountU400In();
    13fc:	64 de       	rcall	.-824    	; 0x10c6
	AccountU400Out();
    13fe:	8f de       	rcall	.-738    	; 0x111e
	AccountIA();
    1400:	ba de       	rcall	.-652    	; 0x1176
	AccountIB();
    1402:	c2 de       	rcall	.-636    	; 0x1188
	AccountIC();
    1404:	ca de       	rcall	.-620    	; 0x119a
	AccountIMax();
    1406:	4c da       	rcall	.-2920   	; 0x8a0
	if(IMax<732)
    1408:	80 91 84 01 	lds	r24, 0x0184
    140c:	90 91 85 01 	lds	r25, 0x0185
    1410:	8c 5d       	subi	r24, 0xDC	; 220
    1412:	92 40       	sbci	r25, 0x02	; 2
    1414:	30 f4       	brcc	.+12     	; 0x1422
	CtIMax=80;
    1416:	80 e5       	ldi	r24, 0x50	; 80
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	90 93 36 01 	sts	0x0136, r25
    141e:	80 93 35 01 	sts	0x0135, r24


	ControlRegimError();
    1422:	7b da       	rcall	.-2826   	; 0x91a
	if(RomReceive[3] & 1)
    1424:	80 91 1b 01 	lds	r24, 0x011B
    1428:	80 ff       	sbrs	r24, 0
    142a:	61 c0       	rjmp	.+194    	; 0x14ee
		{
	ControlRegimWork();
    142c:	90 da       	rcall	.-2784   	; 0x94e
	ControlK();
    142e:	d2 dc       	rcall	.-1628   	; 0xdd4
		}
	else
		{
	ControlRegimWorkDU();
	ControlKDU();
		}
	SetAvaria();		
    1430:	57 da       	rcall	.-2898   	; 0x8e0




	 if(!CtErrorLink)
    1432:	80 91 47 01 	lds	r24, 0x0147
    1436:	88 23       	and	r24, r24
    1438:	51 f4       	brne	.+20     	; 0x144e
		{
//INIT TWI;
    TWBR=0;//F TWI
    143a:	80 b9       	out	0x00, r24	; 0
   TWAR=0;
    143c:	82 b9       	out	0x02, r24	; 2
   TWCR =0;
    143e:	86 bf       	out	0x36, r24	; 54
	TWSR=0xf8;
    1440:	88 ef       	ldi	r24, 0xF8	; 248
    1442:	81 b9       	out	0x01, r24	; 1

    TWBR=0x7f;//F TWI
    1444:	8f e7       	ldi	r24, 0x7F	; 127
    1446:	80 b9       	out	0x00, r24	; 0

	CtErrorLink=CtErrorLink0;
    1448:	8e e1       	ldi	r24, 0x1E	; 30
    144a:	80 93 47 01 	sts	0x0147, r24
		}
    ReadKn();
    144e:	ef d6       	rcall	.+3550   	; 0x222e


    LoadRegTransmit();//++RegTransmit
    1450:	56 d9       	rcall	.-3412   	; 0x6fe
   ReceiveTransmitMaster();
    1452:	c2 d8       	rcall	.-3708   	; 0x5d8




     DecSegm(RomReceive[2]);
    1454:	80 91 1a 01 	lds	r24, 0x011A
    1458:	99 27       	eor	r25, r25
    145a:	01 d7       	rcall	.+3586   	; 0x225e
    SetCursor(0,0);
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	86 2f       	mov	r24, r22
    1460:	c3 d7       	rcall	.+3974   	; 0x23e8
    IndPar();
    1462:	6d d7       	rcall	.+3802   	; 0x233e
     DecSegm(RomReceive[7]);
    1464:	80 91 1f 01 	lds	r24, 0x011F
    1468:	99 27       	eor	r25, r25
    146a:	f9 d6       	rcall	.+3570   	; 0x225e
    SetCursor(40,0);
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	88 e2       	ldi	r24, 0x28	; 40
    1470:	bb d7       	rcall	.+3958   	; 0x23e8
    IndPar();
    1472:	65 d7       	rcall	.+3786   	; 0x233e
    DecSegm(RegimWork);
    1474:	80 91 9d 00 	lds	r24, 0x009D
    1478:	99 27       	eor	r25, r25
    147a:	f1 d6       	rcall	.+3554   	; 0x225e
    SetCursor(80,0);
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	80 e5       	ldi	r24, 0x50	; 80
    1480:	b3 d7       	rcall	.+3942   	; 0x23e8
    IndPar();
    1482:	5d d7       	rcall	.+3770   	; 0x233e
     DecSegm(U50);
    1484:	80 91 b9 01 	lds	r24, 0x01B9
    1488:	90 91 ba 01 	lds	r25, 0x01BA
    148c:	e8 d6       	rcall	.+3536   	; 0x225e
    SetCursor(0,1);
    148e:	61 e0       	ldi	r22, 0x01	; 1
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	aa d7       	rcall	.+3924   	; 0x23e8
    IndPar();
    1494:	54 d7       	rcall	.+3752   	; 0x233e
     DecSegm(I50);
    1496:	80 91 30 01 	lds	r24, 0x0130
    149a:	90 91 31 01 	lds	r25, 0x0131
    149e:	df d6       	rcall	.+3518   	; 0x225e
    SetCursor(40,1);
    14a0:	61 e0       	ldi	r22, 0x01	; 1
    14a2:	88 e2       	ldi	r24, 0x28	; 40
    14a4:	a1 d7       	rcall	.+3906   	; 0x23e8
    IndPar();
    14a6:	4b d7       	rcall	.+3734   	; 0x233e
    DecSegm(PORTC);
    14a8:	85 b3       	in	r24, 0x15	; 21
    14aa:	99 27       	eor	r25, r25
    14ac:	d8 d6       	rcall	.+3504   	; 0x225e
    SetCursor(80,1);
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	80 e5       	ldi	r24, 0x50	; 80
    14b2:	9a d7       	rcall	.+3892   	; 0x23e8
    IndPar();
    14b4:	44 d7       	rcall	.+3720   	; 0x233e
    Reg0=600;
    14b6:	28 e5       	ldi	r18, 0x58	; 88
    14b8:	32 e0       	ldi	r19, 0x02	; 2
    while(Reg0)
    --Reg0;
    14ba:	c9 01       	movw	r24, r18
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	9c 01       	movw	r18, r24
    14c0:	e1 f7       	brne	.-8      	; 0x14ba
    14c2:	90 93 af 00 	sts	0x00AF, r25
    14c6:	80 93 ae 00 	sts	0x00AE, r24
    14ca:	01 cf       	rjmp	.-510    	; 0x12ce
    14cc:	90 91 39 01 	lds	r25, 0x0139
    14d0:	80 91 22 01 	lds	r24, 0x0122
    14d4:	8f 7e       	andi	r24, 0xEF	; 239
    14d6:	80 93 22 01 	sts	0x0122, r24
    14da:	94 fd       	sbrc	r25, 4
    14dc:	66 cf       	rjmp	.-308    	; 0x13aa
    14de:	80 91 22 01 	lds	r24, 0x0122
    14e2:	8f 7d       	andi	r24, 0xDF	; 223
    14e4:	65 cf       	rjmp	.-310    	; 0x13b0
    14e6:	80 91 22 01 	lds	r24, 0x0122
    14ea:	87 7f       	andi	r24, 0xF7	; 247
    14ec:	4d cf       	rjmp	.-358    	; 0x1388
    14ee:	3e db       	rcall	.-2436   	; 0xb6c
    14f0:	f1 dc       	rcall	.-1566   	; 0xed4
    14f2:	9e cf       	rjmp	.-196    	; 0x1430
    14f4:	80 e5       	ldi	r24, 0x50	; 80
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e cf       	rjmp	.-484    	; 0x1316
    14fa:	80 91 22 01 	lds	r24, 0x0122
    14fe:	84 60       	ori	r24, 0x04	; 4
    1500:	80 93 22 01 	sts	0x0122, r24
    1504:	39 cf       	rjmp	.-398    	; 0x1378
    1506:	51 dd       	rcall	.-1374   	; 0xfaa
    1508:	51 de       	rcall	.-862    	; 0x11ac
    150a:	0d cf       	rjmp	.-486    	; 0x1326
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	e9 ce       	rjmp	.-558    	; 0x12e2
    1510:	80 91 22 01 	lds	r24, 0x0122
    1514:	8e 7f       	andi	r24, 0xFE	; 254
    1516:	21 cf       	rjmp	.-446    	; 0x135a

00001518 <__vector_14>:

    }
  
}
SIGNAL(SIG_ADC)
{
    1518:	1f 92       	push	r1
    151a:	0f 92       	push	r0
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	0f 92       	push	r0
    1520:	11 24       	eor	r1, r1
    1522:	2f 93       	push	r18
    1524:	3f 93       	push	r19
    1526:	4f 93       	push	r20
    1528:	5f 93       	push	r21
    152a:	8f 93       	push	r24
    152c:	9f 93       	push	r25
    152e:	ef 93       	push	r30
    1530:	ff 93       	push	r31
    unsigned int RegInt0;

    RegInt0=ADC;
    1532:	44 b1       	in	r20, 0x04	; 4
    1534:	55 b1       	in	r21, 0x05	; 5
//	SPCR |=0x10;


	if(CtAd)
    1536:	20 91 7f 01 	lds	r18, 0x017F
    153a:	30 91 80 01 	lds	r19, 0x0180
    153e:	21 15       	cp	r18, r1
    1540:	31 05       	cpc	r19, r1
    1542:	b9 f0       	breq	.+46     	; 0x1572
	{
	--CtAd;
    1544:	c9 01       	movw	r24, r18
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	90 93 80 01 	sts	0x0180, r25
    154c:	80 93 7f 01 	sts	0x017F, r24
	if(CtAd<=CtAd0)
    1550:	89 5e       	subi	r24, 0xE9	; 233
    1552:	93 40       	sbci	r25, 0x03	; 3
    1554:	58 f4       	brcc	.+22     	; 0x156c
		{  	
	if(RegInt0>AdTemp)
    1556:	80 91 a1 00 	lds	r24, 0x00A1
    155a:	90 91 a2 00 	lds	r25, 0x00A2
    155e:	84 17       	cp	r24, r20
    1560:	95 07       	cpc	r25, r21
    1562:	20 f4       	brcc	.+8      	; 0x156c
	AdTemp=RegInt0;
    1564:	50 93 a2 00 	sts	0x00A2, r21
    1568:	40 93 a1 00 	sts	0x00A1, r20
    156c:	e0 91 be 00 	lds	r30, 0x00BE
    1570:	26 c0       	rjmp	.+76     	; 0x15be
		}
	}
	else
	 {
	 ++TestTimeAd;
    1572:	80 91 a0 00 	lds	r24, 0x00A0
    1576:	8f 5f       	subi	r24, 0xFF	; 255
    1578:	80 93 a0 00 	sts	0x00A0, r24
	 AdResult[NumberAd]=AdTemp;
    157c:	40 91 be 00 	lds	r20, 0x00BE
    1580:	e4 2f       	mov	r30, r20
    1582:	ff 27       	eor	r31, r31
    1584:	ee 0f       	add	r30, r30
    1586:	ff 1f       	adc	r31, r31
    1588:	eb 55       	subi	r30, 0x5B	; 91
    158a:	fe 4f       	sbci	r31, 0xFE	; 254
    158c:	80 91 a1 00 	lds	r24, 0x00A1
    1590:	90 91 a2 00 	lds	r25, 0x00A2
    1594:	80 83       	st	Z, r24
    1596:	91 83       	std	Z+1, r25	; 0x01
	 AdTemp=0;
    1598:	30 93 a2 00 	sts	0x00A2, r19
    159c:	20 93 a1 00 	sts	0x00A1, r18
	 CtAd=CtAd0+2;
    15a0:	8a ee       	ldi	r24, 0xEA	; 234
    15a2:	93 e0       	ldi	r25, 0x03	; 3
    15a4:	90 93 80 01 	sts	0x0180, r25
    15a8:	80 93 7f 01 	sts	0x017F, r24
	 if(NumberAd==1)
    15ac:	41 30       	cpi	r20, 0x01	; 1
    15ae:	29 f0       	breq	.+10     	; 0x15ba
	 	{

	NumberAd=7;
		}
	else
	--NumberAd;
    15b0:	e4 2f       	mov	r30, r20
    15b2:	e1 50       	subi	r30, 0x01	; 1
    15b4:	e0 93 be 00 	sts	0x00BE, r30
    15b8:	02 c0       	rjmp	.+4      	; 0x15be
    15ba:	e7 e0       	ldi	r30, 0x07	; 7
    15bc:	fb cf       	rjmp	.-10     	; 0x15b4

	 }


	 ADMUX = ADMUX & 0xe0;
    15be:	87 b1       	in	r24, 0x07	; 7
    15c0:	80 7e       	andi	r24, 0xE0	; 224
    15c2:	87 b9       	out	0x07, r24	; 7
	 ADMUX =ADMUX | NumberAd;
    15c4:	87 b1       	in	r24, 0x07	; 7
    15c6:	8e 2b       	or	r24, r30
    15c8:	87 b9       	out	0x07, r24	; 7
	 ADCSRA |=(1<<ADSC);
    15ca:	36 9a       	sbi	0x06, 6	; 6
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	9f 91       	pop	r25
    15d2:	8f 91       	pop	r24
    15d4:	5f 91       	pop	r21
    15d6:	4f 91       	pop	r20
    15d8:	3f 91       	pop	r19
    15da:	2f 91       	pop	r18
    15dc:	0f 90       	pop	r0
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	0f 90       	pop	r0
    15e2:	1f 90       	pop	r1
    15e4:	18 95       	reti

000015e6 <__vector_8>:
  	
}

/* SIGNAL(SIG_INPUT_CAPTURE1)
{
 //   ACSR |=0x8;//enable interrupt comparator
    if(!CtOverLow)
    TGen=0xffff;
    else
    {
    TGenTemp[CtTGen]=ICR1-ICR1U;
    ICR1U=ICR1;
    }
    if(CtTGen)
    --CtTGen;
    else
    CtTGen=15;
    CtOverLow=2;

}*/

 SIGNAL(SIG_OVERFLOW1)/*26.2 Mc*/
{
    15e6:	1f 92       	push	r1
    15e8:	0f 92       	push	r0
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	0f 92       	push	r0
    15ee:	11 24       	eor	r1, r1
    15f0:	2f 93       	push	r18
    15f2:	3f 93       	push	r19
    15f4:	4f 93       	push	r20
    15f6:	5f 93       	push	r21
    15f8:	6f 93       	push	r22
    15fa:	7f 93       	push	r23
    15fc:	8f 93       	push	r24
    15fe:	9f 93       	push	r25
    1600:	af 93       	push	r26
    1602:	bf 93       	push	r27
    1604:	ef 93       	push	r30
    1606:	ff 93       	push	r31
 	unsigned char R0;
	if(CtLuk)
    1608:	80 91 94 00 	lds	r24, 0x0094
    160c:	88 23       	and	r24, r24
    160e:	19 f0       	breq	.+6      	; 0x1616
	--CtLuk;
    1610:	81 50       	subi	r24, 0x01	; 1
    1612:	80 93 94 00 	sts	0x0094, r24
	if(RegStop)
    1616:	80 91 92 00 	lds	r24, 0x0092
    161a:	88 23       	and	r24, r24
    161c:	19 f0       	breq	.+6      	; 0x1624
	++RegStop1;
    161e:	80 91 93 00 	lds	r24, 0x0093
    1622:	8f 5f       	subi	r24, 0xFF	; 255
	else
	RegStop1=0;
    1624:	80 93 93 00 	sts	0x0093, r24

	if(CtK5)
    1628:	80 91 0e 01 	lds	r24, 0x010E
    162c:	90 91 0f 01 	lds	r25, 0x010F
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	29 f0       	breq	.+10     	; 0x163e
	--CtK5;
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	90 93 0f 01 	sts	0x010F, r25
    163a:	80 93 0e 01 	sts	0x010E, r24
	if(CtIMax)
    163e:	80 91 35 01 	lds	r24, 0x0135
    1642:	90 91 36 01 	lds	r25, 0x0136
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	09 f4       	brne	.+2      	; 0x164c
    164a:	85 c0       	rjmp	.+266    	; 0x1756
	--CtIMax;
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	90 93 36 01 	sts	0x0136, r25
    1652:	80 93 35 01 	sts	0x0135, r24
	else
	AvariaI |=1;
	if(CtUError)
    1656:	80 91 a7 00 	lds	r24, 0x00A7
    165a:	90 91 a8 00 	lds	r25, 0x00A8
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	09 f4       	brne	.+2      	; 0x1664
    1662:	6f c0       	rjmp	.+222    	; 0x1742
	--CtUError;
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	90 93 a8 00 	sts	0x00A8, r25
    166a:	80 93 a7 00 	sts	0x00A7, r24
	else
	AvariaI |=2;

	if(CtBegin)
    166e:	80 91 88 01 	lds	r24, 0x0188
    1672:	88 23       	and	r24, r24
    1674:	19 f0       	breq	.+6      	; 0x167c
	--CtBegin;
    1676:	81 50       	subi	r24, 0x01	; 1
    1678:	80 93 88 01 	sts	0x0188, r24
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	50 91 16 01 	lds	r21, 0x0116
    1684:	e7 e0       	ldi	r30, 0x07	; 7
    1686:	f1 e0       	ldi	r31, 0x01	; 1
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	46 e0       	ldi	r20, 0x06	; 6
    168e:	08 c0       	rjmp	.+16     	; 0x16a0
	for(R0=0;R0<=6;++R0)
		{
	if(CtErrorFar[R0])
	--CtErrorFar[R0];
    1690:	81 50       	subi	r24, 0x01	; 1
    1692:	80 83       	st	Z, r24
    1694:	41 50       	subi	r20, 0x01	; 1
    1696:	2f 5f       	subi	r18, 0xFF	; 255
    1698:	3f 4f       	sbci	r19, 0xFF	; 255
    169a:	31 96       	adiw	r30, 0x01	; 1
    169c:	47 fd       	sbrc	r20, 7
    169e:	11 c0       	rjmp	.+34     	; 0x16c2
    16a0:	80 81       	ld	r24, Z
    16a2:	88 23       	and	r24, r24
    16a4:	a9 f7       	brne	.-22     	; 0x1690
	else
	ErrorFar |=(1<<R0);
    16a6:	cb 01       	movw	r24, r22
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac
    16b4:	58 2b       	or	r21, r24
    16b6:	41 50       	subi	r20, 0x01	; 1
    16b8:	2f 5f       	subi	r18, 0xFF	; 255
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	31 96       	adiw	r30, 0x01	; 1
    16be:	47 ff       	sbrs	r20, 7
    16c0:	ef cf       	rjmp	.-34     	; 0x16a0
    16c2:	50 93 16 01 	sts	0x0116, r21
		}


	if(CtErrorRS)
    16c6:	80 91 46 01 	lds	r24, 0x0146
    16ca:	88 23       	and	r24, r24
    16cc:	09 f4       	brne	.+2      	; 0x16d0
    16ce:	5c c0       	rjmp	.+184    	; 0x1788
	--CtErrorRS;
    16d0:	81 50       	subi	r24, 0x01	; 1
	else
		{
	InitUsart();
	CtErrorRS=NumberBlok+12;
    16d2:	80 93 46 01 	sts	0x0146, r24
		}
	if(CtUsart)
    16d6:	80 91 92 01 	lds	r24, 0x0192
    16da:	88 23       	and	r24, r24
    16dc:	09 f4       	brne	.+2      	; 0x16e0
    16de:	4f c0       	rjmp	.+158    	; 0x177e
	--CtUsart;
    16e0:	80 91 92 01 	lds	r24, 0x0192
    16e4:	81 50       	subi	r24, 0x01	; 1
	else
		{


	TransmitUsart();
	CtUsart=NumberBlok+6;
    16e6:	80 93 92 01 	sts	0x0192, r24
		}



    for(IndexInt=0;IndexInt<=7;++IndexInt)
    16ea:	10 92 cb 00 	sts	0x00CB, r1
    16ee:	80 91 c1 00 	lds	r24, 0x00C1
    16f2:	48 2f       	mov	r20, r24
    16f4:	55 27       	eor	r21, r21
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    {
    if(RegimError & (1<<IndexInt))
    16f8:	e2 2f       	mov	r30, r18
    16fa:	ff 27       	eor	r31, r31
    16fc:	ca 01       	movw	r24, r20
    16fe:	0e 2e       	mov	r0, r30
    1700:	02 c0       	rjmp	.+4      	; 0x1706
    1702:	95 95       	asr	r25
    1704:	87 95       	ror	r24
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702
    170a:	80 ff       	sbrs	r24, 0
    170c:	2e c0       	rjmp	.+92     	; 0x176a
        {
    if(CtError[IndexInt])
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	eb 56       	subi	r30, 0x6B	; 107
    1714:	fe 4f       	sbci	r31, 0xFE	; 254
    1716:	80 81       	ld	r24, Z
    1718:	91 81       	ldd	r25, Z+1	; 0x01
    171a:	00 97       	sbiw	r24, 0x00	; 0
    171c:	19 f0       	breq	.+6      	; 0x1724
    --CtError[IndexInt];
    171e:	01 97       	sbiw	r24, 0x01	; 1
        }
    else
    CtError[IndexInt]=CtError0[IndexInt];
    1720:	80 83       	st	Z, r24
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	82 2f       	mov	r24, r18
    1726:	8f 5f       	subi	r24, 0xFF	; 255
    1728:	28 2f       	mov	r18, r24
    172a:	88 30       	cpi	r24, 0x08	; 8
    172c:	28 f3       	brcs	.-54     	; 0x16f8
    172e:	80 93 cb 00 	sts	0x00CB, r24
    }
 



	if(CtErrorLink)
    1732:	80 91 47 01 	lds	r24, 0x0147
    1736:	88 23       	and	r24, r24
    1738:	61 f1       	breq	.+88     	; 0x1792
	--CtErrorLink;
    173a:	81 50       	subi	r24, 0x01	; 1
    173c:	80 93 47 01 	sts	0x0147, r24
    1740:	28 c0       	rjmp	.+80     	; 0x1792
    1742:	80 91 a4 00 	lds	r24, 0x00A4
    1746:	90 91 a5 00 	lds	r25, 0x00A5
    174a:	82 60       	ori	r24, 0x02	; 2
    174c:	90 93 a5 00 	sts	0x00A5, r25
    1750:	80 93 a4 00 	sts	0x00A4, r24
    1754:	8c cf       	rjmp	.-232    	; 0x166e
    1756:	80 91 a4 00 	lds	r24, 0x00A4
    175a:	90 91 a5 00 	lds	r25, 0x00A5
    175e:	81 60       	ori	r24, 0x01	; 1
    1760:	90 93 a5 00 	sts	0x00A5, r25
    1764:	80 93 a4 00 	sts	0x00A4, r24
    1768:	76 cf       	rjmp	.-276    	; 0x1656
    176a:	ee 0f       	add	r30, r30
    176c:	ff 1f       	adc	r31, r31
    176e:	df 01       	movw	r26, r30
    1770:	a9 58       	subi	r26, 0x89	; 137
    1772:	bf 4f       	sbci	r27, 0xFF	; 255
    1774:	8d 91       	ld	r24, X+
    1776:	9c 91       	ld	r25, X
    1778:	eb 56       	subi	r30, 0x6B	; 107
    177a:	fe 4f       	sbci	r31, 0xFE	; 254
    177c:	d1 cf       	rjmp	.-94     	; 0x1720
    177e:	a5 d4       	rcall	.+2378   	; 0x20ca
    1780:	80 91 b9 00 	lds	r24, 0x00B9
    1784:	8a 5f       	subi	r24, 0xFA	; 250
    1786:	af cf       	rjmp	.-162    	; 0x16e6
    1788:	93 d4       	rcall	.+2342   	; 0x20b0
    178a:	80 91 b9 00 	lds	r24, 0x00B9
    178e:	84 5f       	subi	r24, 0xF4	; 244
    1790:	a0 cf       	rjmp	.-192    	; 0x16d2
    1792:	ff 91       	pop	r31
    1794:	ef 91       	pop	r30
    1796:	bf 91       	pop	r27
    1798:	af 91       	pop	r26
    179a:	9f 91       	pop	r25
    179c:	8f 91       	pop	r24
    179e:	7f 91       	pop	r23
    17a0:	6f 91       	pop	r22
    17a2:	5f 91       	pop	r21
    17a4:	4f 91       	pop	r20
    17a6:	3f 91       	pop	r19
    17a8:	2f 91       	pop	r18
    17aa:	0f 90       	pop	r0
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	0f 90       	pop	r0
    17b0:	1f 90       	pop	r1
    17b2:	18 95       	reti

000017b4 <__vector_11>:





}

	SIGNAL(SIG_UART_RECV)
{
    17b4:	1f 92       	push	r1
    17b6:	0f 92       	push	r0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	0f 92       	push	r0
    17bc:	11 24       	eor	r1, r1
    17be:	2f 93       	push	r18
    17c0:	3f 93       	push	r19
    17c2:	4f 93       	push	r20
    17c4:	5f 93       	push	r21
    17c6:	6f 93       	push	r22
    17c8:	7f 93       	push	r23
    17ca:	8f 93       	push	r24
    17cc:	9f 93       	push	r25
    17ce:	af 93       	push	r26
    17d0:	bf 93       	push	r27
    17d2:	ef 93       	push	r30
    17d4:	ff 93       	push	r31
	LinkPult();
    17d6:	93 d4       	rcall	.+2342   	; 0x20fe
    17d8:	ff 91       	pop	r31
    17da:	ef 91       	pop	r30
    17dc:	bf 91       	pop	r27
    17de:	af 91       	pop	r26
    17e0:	9f 91       	pop	r25
    17e2:	8f 91       	pop	r24
    17e4:	7f 91       	pop	r23
    17e6:	6f 91       	pop	r22
    17e8:	5f 91       	pop	r21
    17ea:	4f 91       	pop	r20
    17ec:	3f 91       	pop	r19
    17ee:	2f 91       	pop	r18
    17f0:	0f 90       	pop	r0
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	0f 90       	pop	r0
    17f6:	1f 90       	pop	r1
    17f8:	18 95       	reti

000017fa <__udivmodhi4>:
    17fa:	aa 1b       	sub	r26, r26
    17fc:	bb 1b       	sub	r27, r27
    17fe:	51 e1       	ldi	r21, 0x11	; 17
    1800:	07 c0       	rjmp	.+14     	; 0x1810

00001802 <__udivmodhi4_loop>:
    1802:	aa 1f       	adc	r26, r26
    1804:	bb 1f       	adc	r27, r27
    1806:	a6 17       	cp	r26, r22
    1808:	b7 07       	cpc	r27, r23
    180a:	10 f0       	brcs	.+4      	; 0x1810
    180c:	a6 1b       	sub	r26, r22
    180e:	b7 0b       	sbc	r27, r23

00001810 <__udivmodhi4_ep>:
    1810:	88 1f       	adc	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	5a 95       	dec	r21
    1816:	a9 f7       	brne	.-22     	; 0x1802
    1818:	80 95       	com	r24
    181a:	90 95       	com	r25
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	08 95       	ret
