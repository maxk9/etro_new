/*
*Программа AD16 KMU миландр 
*/


#include "MDR32Fx.h"
#include "MDR32F9Qx_config.h"
#include "MDR32F9Qx_port.h"
#include "MDR32F9Qx_rst_clk.h"
#include "MDR32F9Qx_timer.h"
#include "MDR32F9Qx_uart.h"
#include "MDR32F9Qx_iwdg.h"
#include "MDR32F9Qx_eeprom.h"
#include "MDR32F9Qx_adc.h"
#include "MDR32F9Qx_ssp.h"
#include <stdbool.h>


#include <string.h>
//#include <stdlib.h>

#include "font5x7.h"

#include "types.h"

// Kernel includes
#include "FreeRTOSConfig.h"
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"


#define DEBUG_ON 0

#ifdef DEBUG_ON

#include <stdio.h>
#define ITM_Port8(n)    (*((volatile unsigned char *)(0xE0000000+4*n)))
#define ITM_Port16(n)   (*((volatile unsigned short*)(0xE0000000+4*n)))
#define ITM_Port32(n)   (*((volatile unsigned long *)(0xE0000000+4*n)))
#define DEMCR           (*((volatile unsigned long *)(0xE000EDFC)))
#define TRCENA          0x01000000


struct __FILE { int handle; /* Add whatever you need here */ };
FILE __stdout;
FILE __stdin;

int fputc(int ch, FILE *f) {
   if (DEMCR & TRCENA) {

while (ITM_Port32(0) == 0);
    ITM_Port8(0) = ch;
  }
  return(ch);
}


#endif




const char data_str[]=__DATE__;//mmm dd yyyy

/* The time between cycles of the 'check' functionality (defined within the
tick hook. */
#define mainCHECK_DELAY						( ( TickType_t ) 5000 / portTICK_PERIOD_MS )

/* Size of the stack allocated to the uIP task. */
#define mainBASIC_WEB_STACK_SIZE            ( configMINIMAL_STACK_SIZE * 3 )


/* Task priorities. */
#define mainQUEUE_POLL_PRIORITY				( tskIDLE_PRIORITY + 2 )
#define mainCHECK_TASK_PRIORITY				( tskIDLE_PRIORITY + 3 )
#define mainSEM_TEST_PRIORITY				( tskIDLE_PRIORITY + 1 )
#define mainBLOCK_Q_PRIORITY				( tskIDLE_PRIORITY + 2 )
#define mainCREATOR_TASK_PRIORITY           ( tskIDLE_PRIORITY + 3 )
#define mainINTEGER_TASK_PRIORITY           ( tskIDLE_PRIORITY )
#define mainGEN_QUEUE_TASK_PRIORITY			( tskIDLE_PRIORITY )



#define RS485_TX_OFF	PORT_ResetBits( MDR_PORTA, PORT_Pin_2 )
#define RS485_TX_ON		PORT_SetBits( MDR_PORTA, PORT_Pin_2 )

#define  LCD_DIS 		PORT_ResetBits(MDR_PORTA, PORT_Pin_3 )
#define  LCD_EN 		PORT_SetBits(MDR_PORTA, PORT_Pin_3 )
#define  LCD_ALL_ROW_OFF 	{PORT_ResetBits(MDR_PORTA, (PORT_Pin_1 | PORT_Pin_5));	\
							PORT_ResetBits(MDR_PORTB, (PORT_Pin_5|PORT_Pin_6|PORT_Pin_7));}

							
#define  LCD_ROW1_ON 	PORT_SetBits(MDR_PORTA, (PORT_Pin_1))
#define  LCD_ROW2_ON 	PORT_SetBits(MDR_PORTA, (PORT_Pin_5))
#define  LCD_ROW3_ON 	PORT_SetBits(MDR_PORTB, (PORT_Pin_5))					
#define  LCD_ROW4_ON 	PORT_SetBits(MDR_PORTB, (PORT_Pin_6))
#define  LCD_ROW5_ON 	PORT_SetBits(MDR_PORTB, (PORT_Pin_7))
//size_t fre=0;
#define  LED_PJD_ON 	PORT_ResetBits(MDR_PORTB, (PORT_Pin_9))		
#define  LED_PJD_OFF 	PORT_SetBits(MDR_PORTB, (PORT_Pin_9))
#define  LED_ALARM_ON 	PORT_ResetBits(MDR_PORTF, (PORT_Pin_2))							
#define  LED_ALARM_OFF 	PORT_SetBits(MDR_PORTF, (PORT_Pin_2))							
#define  LED_FIRE_ON 	PORT_ResetBits(MDR_PORTF, (PORT_Pin_4))
#define  LED_FIRE_OFF 	PORT_SetBits(MDR_PORTF, (PORT_Pin_4))							
#define  LED_ISOL_ON 	PORT_SetBits(MDR_PORTB, (PORT_Pin_10))								
#define  LED_ISOL_OFF 	PORT_ResetBits(MDR_PORTB, (PORT_Pin_10))							
							
const uint16_t	Yanv_2015_ETRO[] = { 64*5,46*5,35*5,33*5,49*5,61*5,00,18*5,16*5,17*5,21*5,00,62*5,51*5,49*5,47*5},
				OTKAZ[] = { 47*5,51*5,43*5,33*5,40*5},
				KDG[] = { 43*5,37*5,36*5},	
				PZF[] = { 48*5,40*5,53*5},
				OK[] = { 47*5,43*5},
				ALARM_TF[] = {0,0,0,33*5,35*5,33*5,49*5,14*5,0,49*5,51*5},
				PN_RAZR[] = {0,0,0,0,0,48*5,46*5,0,49*5,33*5,40*5,49*5,14*5},
				Mu_upr[] = {0,0,0,0,45*5,52*5,14*5,0,52*5,48*5,49*5,14*5},
				Du_upr[] = {0,0,0,37*5,41*5,50*5,51*5,14*5,0,52*5,48*5,49*5,14*5},
				Otk_KZF[] = {47*5,51*5,43*5,33*5,40*5,0,43*5,40*5,53*5},
				Prot_OFF[] = {40*5,33*5,58*5,41*5,51*5,33*5,0,47*5,51*5,43*5,44*5,14*5},
				Alarm_OG[] = {0,0,0,33*5,35*5,33*5,49*5,14*5,0,51*5,47*5,39*5},
				Alarm_PM[] = {0,0,0,0,33*5,35*5,33*5,49*5,14*5,0,49*5,45*5},
				Raznos[] = {49*5,33*5,40*5,46*5,47*5,50*5},
				Ug_b_dop[] = {0,0,0,0,0,65*5,36*5,30*5,37*5,47*5,48*5},
				Ug_m_dop[] = {0,0,0,0,0,65*5,36*5,28*5,37*5,47*5,48*5},
				Overload[] = {48*5,38*5,49*5,38*5,36*5,49*5,52*5,40*5,43*5,33*5},
				KZ_load[] = {43*5,40*5,0,46*5,33*5,36*5,49*5,52*5,40*5,43*5,41*5},
				PUSK[] = {0,0,0,0,0,0,48*5,52*5,50*5,43*5},
				OG_m_37[] = {0,0,0,0,0,51*5,47*5,39*5,28*5,19*5,23*5},
				OSTANOV[] = {0,0,0,0,47*5,50*5,51*5,33*5,46*5,47*5,35*5},
				NO_PUSK[] = {0,0,0,46*5,38*5,51*5,0,48*5,52*5,50*5,43*5,33*5},
				Rashol[] = {0,0,0,0,49*5,33*5,50*5,54*5,47*5,44*5,14*5},
				NO_STOP[] = {0,0,46*5,38*5,51*5,0,47*5,50*5,51*5,33*5,46*5,47*5,35*5,33*5},
				NO_Vozb[] = {0,0,0,46*5,38*5,51*5,0,35*5,47*5,40*5,34*5,14*5};

					
					
volatile struct 
{
	BaseType_t Ndiz;	//0
	BaseType_t FreqU;	//1
	BaseType_t UDG;		//2
	BaseType_t UBS;		//3
	BaseType_t Igen;	//4
	BaseType_t DM;		//5
	BaseType_t TM;		//6
	BaseType_t TBap;	//7
	BaseType_t LvlDIZ;	//8
	BaseType_t RegWrk;	//9
	BaseType_t Isol;	//10
	BaseType_t Led;		//11
	BaseType_t RegSDG;	//12
	BaseType_t Error;	//13
	BaseType_t RegimTime; //14
	BaseType_t RegimError;//15
}StatusDG = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

volatile struct 
{
	uint32_t ADCF;	//0
	uint32_t ADCU;	//1
	uint32_t RegSMU;	//3
	uint32_t CurrPosLCD;	//4
}StatusMU = {0, 0, 0, 0};

#define PDG_FRAME_SIZE	(uint32_t)17 //+crc

volatile struct 
{
	uint32_t ArrayRX[(PDG_FRAME_SIZE)];
	uint32_t count;
	uint32_t tail;
	uint32_t head;
}DataUsart = {0, 0, 0, 0};


#define ADC_COUNT_CH 3
volatile uint32_t	ADC_Arr[ADC_COUNT_CH];

volatile uint32_t	IndData[5];							
							
volatile uint16_t	delay_count = 0,
					led_reg[7][5],
					index_char[16];

volatile bool		adc_ok = false,
					one_sec = false,
					two_sec = false,
					read_ok = false;

xSemaphoreHandle 	xTime_Err_Semaphore = NULL,
					xADC_cmpl_Semaphore = NULL,
					xUSART_RX_Semaphore = NULL;
/* The queue used to send messages to the LCD task. */
QueueHandle_t xLCDQueue;

#define LINK_COUNT	9	//число попыток связи



//SemaphoreHandle_t xPKBA_RX_Semaphore = NULL;

void vLink_SysTask( void *pvParameters );
void vIndikatorTask( void *pvParameters );
void vKeyHandlerTask( void *pvParameters );
void vADC_CalkTask( void *pvParameters );

/*
 * Configure the hardware for the demo.
 */
static void prvSetupHardware( void );

/*
 * Configures the high frequency timers - those used to measure the timing
 * jitter while the real time kernel is executing.
 */
extern void vSetupHighFrequencyTimer( void );

/*
 * Hook functions that can get called by the kernel.
 */
void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName );
void clear_Arr( u8 *arr,u8 cnt );
void UART1_send_byte( uint8_t byte );
void scroll_mess_left(void);
void load_led_reg(void);
void show_led_data(uint8_t num_par);
void DecSegm(uint16_t R0);
void OK_PDG(void);
void clear_lcd(void);
void err_KDG(void);
bool read_rx_data(void);

//==================================================================================
//==================================================================================
//==================================================================================
//==================================================================================
#define	AD_SAMPL	62
void ADC_IRQHandler(void)//0.144 ms //36 тактов на один канал
{
	uint8_t cnt_ch = 0;
	//static bool ADC_compl = false;
	static uint8_t 	countAD = AD_SAMPL+2;
	static uint32_t AdTempResult = 0;
//	static portBASE_TYPE xTaskWoken;
	uint32_t tmp = 0;

	tmp = ADC1_GetResult();
	cnt_ch = ( tmp>>16 );

	tmp &= 0xFFF; //12 bit
	
//	xTaskWoken = pdFALSE;
	
	if( countAD )
	{
		--countAD;
		AdTempResult += tmp;
	}
	else
	{
		countAD = AD_SAMPL + 2;
		AdTempResult >>= 6; 
		
		switch(cnt_ch)
		{
			case ADC_CH_ADC1:
				ADC1_SetChannel( ADC_CH_TEMP_SENSOR );
				break;
			case ADC_CH_TEMP_SENSOR:
				ADC1_SetChannel( ADC_CH_ADC0 );
				cnt_ch = 2;
				break;
			default:
				ADC1_SetChannel((cnt_ch+1));
				break;
		}
		
		ADC_Arr[cnt_ch] = AdTempResult;
		
		if( cnt_ch == 2 )
		{
			adc_ok = true;
//			if( xADC_cmpl_Semaphore != NULL )
//			{
//				xSemaphoreGiveFromISR( xADC_cmpl_Semaphore, &xTaskWoken );
//			}
		}
		AdTempResult = 0;
	}
	
//	if( xTaskWoken != pdFALSE )
//    {
//        // We can force a context switch here. 
//		portYIELD();
//    }
}
//==================================================================================
void Timer1_IRQHandler(void)//10ms
{
	static uint8_t 	cnt_row = 0;
	uint8_t reg = 7;
	
	MDR_TIMER1 -> CNT = 0x0000;
	MDR_TIMER1 -> STATUS &= ~( 1 << 1 );
	NVIC_ClearPendingIRQ( Timer1_IRQn );
	
	LCD_DIS;
	LCD_ALL_ROW_OFF;
	
	while( reg )
	{
		--reg;
		SSP_SendData( MDR_SSP1, led_reg[reg][cnt_row] );
		while( SSP_GetFlagStatus( MDR_SSP1, SSP_FLAG_BSY ) == SET );
	}

	LCD_EN;
	
	switch( cnt_row )
	{
		case 0:
			LCD_ROW1_ON;
			break;
		case 1:
			LCD_ROW2_ON;
			break;
		case 2:
			LCD_ROW3_ON;
			break;
		case 3:
			LCD_ROW4_ON;
			break;
		case 4:
			LCD_ROW5_ON;
			break;
		default: break;
	}


	if( cnt_row < 4 )
		++cnt_row;
	else
		cnt_row = 0;
}
//==================================================================================
void Timer2_IRQHandler( void )//1s
{
	static uint8_t 	cnt_sec=0;
//	static portBASE_TYPE xTaskWoken;
	
	MDR_TIMER2 -> CNT = 0x0000;
	MDR_TIMER2 -> STATUS &= ~( 1 << 1 );
	NVIC_ClearPendingIRQ( Timer2_IRQn );
	
	if(one_sec)
		two_sec = true;
	
	one_sec = true;
	
//	xTaskWoken = pdFALSE;
	
	if(cnt_sec > 59)
	//if(cnt_sec > 99)
	{
		//ChangeCtTime();
		//ChangeCtError();
//xSemaphoreGiveFromISR(xTime_Err_Semaphore, &xTaskWoken);
		cnt_sec = 0;	
		
	}
	else
		++cnt_sec;
	
//	if( xTaskWoken != pdFALSE )
//    {
//        // We can force a context switch here. 
//		portYIELD();
//    }
}
//==================================================================================
void UART1_IRQHandler( void )//RX 14 byte
{
	uint32_t tmp = 0,cnt = 0;
	static bool start = false;
	static uint32_t cnt_rx_byte = 0;
//	static portBASE_TYPE xTaskWoken;
	
//	xTaskWoken = pdFALSE;
PORT_SetBits( MDR_PORTB, PORT_Pin_10 );
	//while(!UART_GetFlagStatus( MDR_UART1, UART_FLAG_RXFE ))
	while(cnt < 17)
	{
		tmp = (uint8_t)UART_ReceiveData( MDR_UART1 );
		
		if(( tmp == 0xAA ) && ( !start ))
		{
			start = true;
			cnt_rx_byte = 0;
			
			__nop();
			
		}
		else
		{
			if( !read_ok )
			{
				DataUsart.ArrayRX[ cnt_rx_byte ] = tmp; 

				++cnt_rx_byte;
				
				if( cnt_rx_byte >= PDG_FRAME_SIZE )
				{
					start = false;
					read_ok = true;
		//PORT_ResetBits( MDR_PORTB, PORT_Pin_10 );
		//			xSemaphoreGiveFromISR( xUSART_RX_Semaphore, &xTaskWoken );
				}
			}
		}
		++cnt;
	}
	PORT_ResetBits( MDR_PORTB, PORT_Pin_10 );
//	if( xTaskWoken != pdFALSE )
//    {
//        // We can force a context switch here. 
//		portYIELD();
//    }
}
//==================================================================================

int main(void)
{
	uint32_t pausa = 0xFFFF;
	uint8_t cnt_b=0;
	
	while(--pausa);
	
	prvSetupHardware();
	
	LED_PJD_ON;
	LED_ALARM_ON;
	LED_FIRE_ON;
	LED_ISOL_ON;
		
	while(cnt_b<16)
	{
		index_char[cnt_b]=6*5; //FF
		++cnt_b;
	}
	load_led_reg();
	
	one_sec = false;
	while(!one_sec);
	clear_lcd();
	
	
	xTaskCreate( vADC_CalkTask,  "ADCCalk", configMINIMAL_STACK_SIZE, NULL, 3,( xTaskHandle * ) NULL);
	xTaskCreate( vIndikatorTask,  "Indikator", configMINIMAL_STACK_SIZE, NULL, 3,( xTaskHandle * ) NULL);
	
//	if( xUSART_RX_Semaphore != NULL ) 
//		{
	xTaskCreate( vLink_SysTask,  "Link_Sys", (configMINIMAL_STACK_SIZE), NULL, 3,( xTaskHandle * ) NULL);
//		}
	xTaskCreate( vKeyHandlerTask,  "Key", (configMINIMAL_STACK_SIZE), NULL, 3,( xTaskHandle * ) NULL);

		
	UART_Cmd( MDR_UART1, ENABLE );
	/* Start the scheduler. */
	vTaskStartScheduler();

    /* Will only get here if there was insufficient memory to create the idle
    task. */
	while(1);
}
//==================================================================================
//==================================================================================
//==================================================================================
#define ALL_PORTS_CLK (	RST_CLK_PCLK_PORTA | RST_CLK_PCLK_PORTB | \
						RST_CLK_PCLK_PORTC | RST_CLK_PCLK_PORTD | \
						RST_CLK_PCLK_PORTE | RST_CLK_PCLK_PORTF)

void prvSetupHardware( void )
{
	PORT_InitTypeDef PORT_InitStructure;
	UART_InitTypeDef UART_InitStructure;
	SSP_InitTypeDef SPI_InitStructure;
	TIMER_CntInitTypeDef sTIM_CntInit;
	ADC_InitTypeDef sADC;
	ADCx_InitTypeDef sADCx;
	
	ADC_StructInit( &sADC );
	ADCx_StructInit( &sADCx );
	
//CLK
/* Enable HSE clock oscillator */
	RST_CLK_HSEconfig( RST_CLK_HSE_ON );
	
	while( RST_CLK_HSEstatus() == ERROR );
	
	/* Configure CPU_PLL clock */
	RST_CLK_CPU_PLLconfig ( RST_CLK_CPU_PLLsrcHSEdiv1,RST_CLK_CPU_PLLmul4 );
	RST_CLK_CPU_PLLcmd( ENABLE );
	
	while( RST_CLK_CPU_PLLstatus() == ERROR);
	
	RST_CLK_CPUclkSelection( RST_CLK_CPUclkCPU_C3 );
	EEPROM_SetLatency( EEPROM_Latency_2 ); //до 75Mhz
	
	RST_CLK_CPU_PLLuse( ENABLE);
	
	RST_CLK_HSIcmd( DISABLE );

/* Enable the RTCHSE clock on all ports */
	RST_CLK_PCLKcmd( ALL_PORTS_CLK, ENABLE );

//ADC
	
	RST_CLK_PCLKcmd( RST_CLK_PCLK_ADC, ENABLE );
	
	/* ADC Configuration */
	/* Reset all ADC settings */
	ADC_DeInit();

	sADC.ADC_StartDelay = 0;
	sADC.ADC_TempSensor = ADC_TEMP_SENSOR_Enable;
	sADC.ADC_TempSensorAmplifier = ADC_TEMP_SENSOR_AMPLIFIER_Enable;
	sADC.ADC_TempSensorConversion = ADC_TEMP_SENSOR_CONVERSION_Enable;
	sADC.ADC_IntVRefConversion = DISABLE;
	sADC.ADC_IntVRefTrimming = 0;
	
	ADC_Init( &sADC );

	
	sADCx.ADC_ClockSource = ADC_CLOCK_SOURCE_CPU;
	sADCx.ADC_SamplingMode = ADC_SAMPLING_MODE_CICLIC_CONV;
	sADCx.ADC_ChannelSwitching = ADC_CH_SWITCHING_Disable;
	sADCx.ADC_LevelControl = DISABLE;
	sADCx.ADC_ChannelNumber	= ADC_CH_ADC0;
	sADCx.ADC_VRefSource	= ADC_VREF_SOURCE_INTERNAL;
	sADCx.ADC_IntVRefSource	= ADC_INT_VREF_SOURCE_INEXACT;
	//sADCx.ADC_Prescaler		= ADC_CLK_div_2048;//4.6 ms
	//sADCx.ADC_Prescaler		= ADC_CLK_div_256;
	//sADCx.ADC_Prescaler = ADC_CLK_div_64;//0.144 ms
	//sADCx.ADC_Prescaler = ADC_CLK_div_32;//0.07 ms
	sADCx.ADC_Prescaler = ADC_CLK_div_64;

	sADCx.ADC_DelayGo = 7;

	ADC1_Init(&sADCx);
	
	ADC1_ClearOverwriteFlag();
	
	/* Enable ADC1 EOCIF and AWOIFEN interupts */
	ADC1_ITConfig((ADC1_IT_END_OF_CONVERSION), ENABLE);
	
	NVIC_EnableIRQ(ADC_IRQn);

	
	/* ADC1 enable */
	ADC1_Cmd(ENABLE);	
	
//SPI
	PORT_StructInit( &PORT_InitStructure );//reset struct

	PORT_InitStructure.PORT_Pin = ( PORT_Pin_0 | PORT_Pin_1 );//spi
	PORT_InitStructure.PORT_FUNC = PORT_FUNC_ALTER;
	PORT_InitStructure.PORT_MODE = PORT_MODE_DIGITAL;
	PORT_InitStructure.PORT_SPEED = PORT_SPEED_SLOW;
	PORT_Init( MDR_PORTF, &PORT_InitStructure );

 	RST_CLK_PCLKcmd( RST_CLK_PCLK_SSP1, ENABLE );

	/* Reset all SSP settings */
	SSP_DeInit( MDR_SSP1 );	
	
	SSP_BRGInit( MDR_SSP1, SSP_HCLKdiv8 );
	

	/* SSP1 MASTER configuration ------------------------------------------------*/
	SSP_StructInit (&SPI_InitStructure);
	
	SPI_InitStructure.SSP_SCR = 0x00;
	SPI_InitStructure.SSP_CPSDVSR = 10;
	SPI_InitStructure.SSP_Mode = SSP_ModeMaster;
	SPI_InitStructure.SSP_WordLength = SSP_WordLength16b;
	SPI_InitStructure.SSP_SPH = SSP_SPH_2Edge;
	SPI_InitStructure.SSP_SPO = SSP_SPO_Low;
	SPI_InitStructure.SSP_FRF = SSP_FRF_SPI_Motorola;
	SPI_InitStructure.SSP_HardwareFlowControl = SSP_HardwareFlowControl_SSE;

	SSP_Init( MDR_SSP1, &SPI_InitStructure );
	  /* Enable SSP1 */
	SSP_Cmd( MDR_SSP1, ENABLE );
	
	
//Timer1
	
	// TIMER1
	RST_CLK_PCLKcmd( RST_CLK_PCLK_TIMER1, ENABLE );
	/* Reset all TIMER1 settings */
	TIMER_DeInit( MDR_TIMER1 );

	TIMER_BRGInit( MDR_TIMER1, TIMER_HCLKdiv1 );

	/* TIM1 configuration ------------------------------------------------*/
	/* Initializes the TIMERx Counter ------------------------------------*/
	sTIM_CntInit.TIMER_IniCounter				= 0;
	sTIM_CntInit.TIMER_Prescaler                = 1000;// CLK = TIMER_CLK/(TIMER_Prescaler + 1)
	sTIM_CntInit.TIMER_Period                   = 250;
	sTIM_CntInit.TIMER_CounterMode              = TIMER_CntMode_ClkFixedDir;
	sTIM_CntInit.TIMER_CounterDirection         = TIMER_CntDir_Up;
	sTIM_CntInit.TIMER_EventSource              = TIMER_EvSrc_None;
	sTIM_CntInit.TIMER_FilterSampling           = TIMER_FDTS_TIMER_CLK_div_1;
	sTIM_CntInit.TIMER_ARR_UpdateMode           = TIMER_ARR_Update_Immediately;
	sTIM_CntInit.TIMER_ETR_FilterConf           = TIMER_Filter_1FF_at_TIMER_CLK;
	sTIM_CntInit.TIMER_ETR_Prescaler            = TIMER_ETR_Prescaler_None;
	sTIM_CntInit.TIMER_ETR_Polarity             = TIMER_ETRPolarity_NonInverted;
	sTIM_CntInit.TIMER_BRK_Polarity             = TIMER_BRKPolarity_NonInverted;
	TIMER_CntInit ( MDR_TIMER1, &sTIM_CntInit );

	NVIC_EnableIRQ( Timer1_IRQn );
	TIMER_ITConfig( MDR_TIMER1, TIMER_STATUS_CNT_ARR, ENABLE );
	
  
	/* TMR1 enable */
	TIMER_Cmd ( MDR_TIMER1, ENABLE );


	
	// TIMER2
	RST_CLK_PCLKcmd( RST_CLK_PCLK_TIMER2, ENABLE );
	/* Reset all TIMER1 settings */
	TIMER_DeInit( MDR_TIMER2 );

	TIMER_BRGInit(MDR_TIMER2,TIMER_HCLKdiv1);

	/* TIM2 configuration ------------------------------------------------*/
	/* Initializes the TIMERx Counter ------------------------------------*/
	sTIM_CntInit.TIMER_IniCounter				= 0;
//	sTIM_CntInit.TIMER_Prescaler                = 1000;// CLK = TIMER_CLK/(TIMER_Prescaler + 1)
//	sTIM_CntInit.TIMER_Period                   = 16000;
	sTIM_CntInit.TIMER_Prescaler                = 1000;// CLK = TIMER_CLK/(TIMER_Prescaler + 1)
	sTIM_CntInit.TIMER_Period                   = 64000;
	sTIM_CntInit.TIMER_CounterMode              = TIMER_CntMode_ClkFixedDir;
	sTIM_CntInit.TIMER_CounterDirection         = TIMER_CntDir_Up;
	sTIM_CntInit.TIMER_EventSource              = TIMER_EvSrc_None;
	sTIM_CntInit.TIMER_FilterSampling           = TIMER_FDTS_TIMER_CLK_div_1;
	sTIM_CntInit.TIMER_ARR_UpdateMode           = TIMER_ARR_Update_Immediately;
	sTIM_CntInit.TIMER_ETR_FilterConf           = TIMER_Filter_1FF_at_TIMER_CLK;
	sTIM_CntInit.TIMER_ETR_Prescaler            = TIMER_ETR_Prescaler_None;
	sTIM_CntInit.TIMER_ETR_Polarity             = TIMER_ETRPolarity_NonInverted;
	sTIM_CntInit.TIMER_BRK_Polarity             = TIMER_BRKPolarity_NonInverted;
	TIMER_CntInit (MDR_TIMER2,&sTIM_CntInit);

	NVIC_EnableIRQ(Timer2_IRQn);
	TIMER_ITConfig(MDR_TIMER2,TIMER_STATUS_CNT_ARR, ENABLE);
	
  
	/* TMR2 enable */
	TIMER_Cmd ( MDR_TIMER2,ENABLE );
//UART1
	
	/************************ UART1 Initialization *************************/
	
	RST_CLK_PCLKcmd( RST_CLK_PCLK_UART1, ENABLE );
	PORT_StructInit( &PORT_InitStructure );//reset struct

	//PORT_InitStructure.PORT_Pin = PORT_Pin_5|PORT_Pin_6;//RX TX
	PORT_InitStructure.PORT_Pin = ( PORT_Pin_6 | PORT_Pin_7 );//RX TX
	PORT_InitStructure.PORT_FUNC = PORT_FUNC_OVERRID;
	PORT_InitStructure.PORT_MODE = PORT_MODE_DIGITAL;
	PORT_InitStructure.PORT_SPEED = PORT_SPEED_SLOW;
	PORT_Init( MDR_PORTA, &PORT_InitStructure );

	PORT_InitStructure.PORT_Pin = PORT_Pin_2;//EN RS485
	PORT_InitStructure.PORT_OE = PORT_OE_OUT;
	PORT_InitStructure.PORT_PD = PORT_PD_DRIVER;
	PORT_InitStructure.PORT_FUNC = PORT_FUNC_PORT;
	PORT_Init( MDR_PORTA, &PORT_InitStructure );
	
	RS485_TX_OFF;
	
	/* Set the HCLK division factor = 1 for UART1,UART2*/
	UART_BRGInit( MDR_UART1, UART_HCLKdiv1 );
	UART_DeInit( MDR_UART1 );
	
	/* Disable interrupt on UART1 */
    NVIC_DisableIRQ( UART1_IRQn );
	
	/* Initialize UART_InitStructure */
	UART_InitStructure.UART_BaudRate			= 115200;
	UART_InitStructure.UART_WordLength			= UART_WordLength8b;
	UART_InitStructure.UART_StopBits			= UART_StopBits2;
	UART_InitStructure.UART_Parity				= UART_Parity_No;
	UART_InitStructure.UART_FIFOMode			= UART_FIFO_ON;
	UART_InitStructure.UART_HardwareFlowControl	= UART_HardwareFlowControl_RXE | UART_HardwareFlowControl_TXE;

	/* Configure UART1 parameters*/
	UART_Init( MDR_UART1,&UART_InitStructure );

	MDR_UART1->IFLS = (0x04<<3);//7/8 full FIFO

	NVIC_EnableIRQ( UART1_IRQn );
	UART_ITConfig( MDR_UART1, UART_IT_RX, ENABLE );
	/* Enables UART2 peripheral */
	//UART_Cmd( MDR_UART1, ENABLE );
	UART_Cmd( MDR_UART1, DISABLE );
	
//PORT
	
	PORT_StructInit( &PORT_InitStructure );//reset struct	
 /* Configure PORTA pins */
	PORT_InitStructure.PORT_Pin   = ( PORT_Pin_1 | PORT_Pin_3 | PORT_Pin_5);
	PORT_InitStructure.PORT_PD 	  = PORT_PD_DRIVER;
	PORT_InitStructure.PORT_OE	  = PORT_OE_OUT;
	PORT_InitStructure.PORT_FUNC  = PORT_FUNC_PORT;
	PORT_InitStructure.PORT_MODE  = PORT_MODE_DIGITAL;
	PORT_InitStructure.PORT_SPEED = PORT_SPEED_SLOW;

	PORT_Init( MDR_PORTA, &PORT_InitStructure );

 /* Configure PORTB pins */
	PORT_InitStructure.PORT_Pin   = (PORT_Pin_5 | PORT_Pin_6 | PORT_Pin_7 | PORT_Pin_9 | PORT_Pin_10);
	PORT_InitStructure.PORT_PD 	  = PORT_PD_DRIVER;
	PORT_InitStructure.PORT_OE	  = PORT_OE_OUT;
	PORT_InitStructure.PORT_FUNC  = PORT_FUNC_PORT;
	PORT_InitStructure.PORT_MODE  = PORT_MODE_DIGITAL;
	PORT_InitStructure.PORT_SPEED = PORT_SPEED_SLOW;

	PORT_Init(MDR_PORTB, &PORT_InitStructure);


 /* Configure PORTD pins */
	PORT_InitStructure.PORT_Pin   = (PORT_Pin_0 | PORT_Pin_1);
	PORT_InitStructure.PORT_PD 	  = PORT_PD_DRIVER;
	PORT_InitStructure.PORT_OE	  = PORT_OE_IN;
	PORT_InitStructure.PORT_FUNC  = PORT_FUNC_PORT;
	PORT_InitStructure.PORT_MODE  = PORT_MODE_ANALOG;
	PORT_InitStructure.PORT_SPEED = PORT_SPEED_SLOW;

	PORT_Init(MDR_PORTD, &PORT_InitStructure);
	
 /* Configure PORTE pins */
	PORT_InitStructure.PORT_Pin   = ( PORT_Pin_0 | PORT_Pin_1 | PORT_Pin_2 | PORT_Pin_3 | PORT_Pin_6 | PORT_Pin_7);
	PORT_InitStructure.PORT_PD 	  = PORT_PD_DRIVER;
	PORT_InitStructure.PORT_OE	  = PORT_OE_IN;
	PORT_InitStructure.PORT_FUNC  = PORT_FUNC_PORT;
	PORT_InitStructure.PORT_MODE  = PORT_MODE_DIGITAL;
	PORT_InitStructure.PORT_SPEED = PORT_SPEED_SLOW;

	PORT_Init(MDR_PORTE, &PORT_InitStructure);

 /* Configure PORTF pins */
 	PORT_InitStructure.PORT_Pin   = ( PORT_Pin_2 | PORT_Pin_4 );
	PORT_InitStructure.PORT_PD 	  = PORT_PD_DRIVER;
	PORT_InitStructure.PORT_OE	  = PORT_OE_OUT;
	PORT_InitStructure.PORT_FUNC  = PORT_FUNC_PORT;
	PORT_InitStructure.PORT_MODE  = PORT_MODE_DIGITAL;
	PORT_InitStructure.PORT_SPEED = PORT_SPEED_SLOW;
	
	PORT_Init(MDR_PORTF, &PORT_InitStructure);
	
	PORT_InitStructure.PORT_Pin   = ( PORT_Pin_3 | PORT_Pin_5 );
	PORT_InitStructure.PORT_PD 	  = PORT_PD_DRIVER;
	PORT_InitStructure.PORT_OE	  = PORT_OE_IN;
	PORT_InitStructure.PORT_FUNC  = PORT_FUNC_PORT;
	PORT_InitStructure.PORT_MODE  = PORT_MODE_DIGITAL;
	PORT_InitStructure.PORT_SPEED = PORT_SPEED_SLOW;

	PORT_Init(MDR_PORTF, &PORT_InitStructure);
	
}

//==================================================================================
void vIndikatorTask( void *pvParameters )
{
	for( ;; )
	{
		/* Wait for a message to arrive that requires displaying. */
	//	while( xQueueReceive( xLCDQueue, &xMessage, portMAX_DELAY ) != pdPASS );

		/* Display the message.  Print each message to a different position. */
		//GLCD_PutString(xMessage);
		
		vTaskDelay( 50 );
	}
}
//==================================================================================
void vADC_CalkTask( void *pvParameters )
{
 //	xADC_cmpl_Semaphore = xSemaphoreCreateBinary();
 	for( ;; )
 	{
		//if( xADC_cmpl_Semaphore != NULL )adc_ok
		if( adc_ok )
		{
			//xSemaphoreTake( xADC_cmpl_Semaphore, portMAX_DELAY );
			StatusMU.ADCF = ADC_Arr[1];
			StatusMU.ADCU = ADC_Arr[0];
			adc_ok = false;
		}
	}
}
//==================================================================================
void vLink_SysTask( void *pvParameters )
{
 	bool  first_err=true, first_ok = true;// lnk_ok = false;
	uint8_t sum=0, byte1 = 0, byte2 = 0, byte3 = 0, byte4 = 0, k=0, b=0;
 	//static char strk1[mainMAX_MSG_LEN];
//	static uint8_t ;
	//xLCDMessage xMessage;
 	/* Create the semaphore used by the ISR to wake this task. */
// 	xUSART_RX_Semaphore = xSemaphoreCreateBinary();
 	for( ;; )
 	{
//		if( xUSART_RX_Semaphore != NULL )
//		{
		//	if((xSemaphoreTake( xUSART_RX_Semaphore, ( TickType_t )100  )) == pdTRUE )
		//	if(xSemaphoreTake( xUSART_RX_Semaphore, portMAX_DELAY) == pdTRUE )
			if( read_ok )
			{
				vTaskDelay( 2 );
				
				if( read_rx_data() == true )
				{
					sum = 0; 
					byte1 = 0;
					byte2 = 0;
					byte3 = 0;
					byte4 = 0;
					
					taskENTER_CRITICAL();
					
					byte1 = (uint8_t) StatusMU.RegSMU;
					byte2 = (uint8_t) StatusMU.ADCF;
					byte3 = (uint8_t) StatusMU.ADCU;
					byte4 = (uint8_t) StatusMU.CurrPosLCD;
					
					//sum = byte1 + byte2 + byte3 + byte4 + 0xAA;
					sum = 1 + 2 + 3 + 4 + 0xAA;
					sum = 255 - sum;
					++sum;	

					//NVIC_DisableIRQ(UART1_IRQn);
					UART_ITConfig( MDR_UART1, UART_IT_RX, DISABLE );
					
					RS485_TX_ON;
					UART1_send_byte( 0xAA );
//					UART1_send_byte( byte1 );
//					UART1_send_byte( byte2 );
//					UART1_send_byte( byte3 );
//					UART1_send_byte( byte4 );
					UART1_send_byte( 1 );
					UART1_send_byte( 2 );
					UART1_send_byte( 3 );
					UART1_send_byte( 4 );
					__disable_irq();
					UART1_send_byte( sum );
					while(UART_GetFlagStatus (MDR_UART1, UART_FLAG_BUSY));
					RS485_TX_OFF;
					
					__enable_irq();

					UART_ITConfig( MDR_UART1, UART_IT_RX, ENABLE );
					
					taskEXIT_CRITICAL();
					
					if(first_ok)
					{
						first_err = true;
						first_ok = false;
						OK_PDG();
					//	vTaskDelay( 200 );
					}
				}
				else
					++b;
				
				read_ok = false;
				one_sec = false;
			}
//			else //time out
//			{
////				++k;
//				++b;
//			}
			
			if(two_sec)
			{
				two_sec = false;
				DecSegm(b);
				index_char[13] = (IndData[2]+16)*5;
				index_char[14] = (IndData[3]+16)*5;
				index_char[15] = (IndData[4]+16)*5;
				load_led_reg();
				
				if(first_err)
				{
					err_KDG();
					first_err = false;
					first_ok = true;
				}
			}
			
//			if( k > LINK_COUNT )
//			{
//				k = 0;
//				
//			}
//		}
	}
}
//==================================================================================
void vKeyHandlerTask( void *pvParameters )
{ // Key handling is a continuous process and as such the task 
	// is implemented using an infinite loop (as most real time 
	// tasks are). 
	static uint16_t RegKn = 0, RegKnOld = 0;
//	char stat_buff[150];
	u8 i=0, j=0;
	
	for( ;; )
	{
		
#if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( DEBUG_ON == 1 ) )
		if( one_sec )
		{	
			char stat_buff[150];
			u8 i=0, j=0;
			
			one_sec = false;
			
			printf( "%c[1;1f%c[J", 27, 27 ); //ClearScreen
			
			for( i=0; i<150; i++ )
				stat_buff[i] = 0;
			
//			vTaskGetRunTimeStats( stat_buff );
//			
//			i = 149;
//			while( !stat_buff[i] )
//				i--;
//			
//			
//			
//			j=0;
//			while( j<i )
//			{
//				putchar( stat_buff[j] );
//				++j;
//			}
//			
//			for( i=0; i<150; i++ )
//				stat_buff[i] = 0;
//			
//			putchar( '\r' );
//			putchar( '\n' );
			
			vTaskList(stat_buff);
			
			i = 149;
			while( !stat_buff[i] )
				i--;
			
			j=0;
			while( j<i )
			{
				putchar( stat_buff[j] );
				++j;
			}
		}
#endif			
		
		if(!PORT_ReadInputDataBit(MDR_PORTE,PORT_Pin_0))
			RegKn |= 1;
		else
			RegKn &= 0xfffe;
		
		if(!PORT_ReadInputDataBit(MDR_PORTE,PORT_Pin_1))
			RegKn |= 2;
		else
			RegKn &=0xfffd;
		
		if(!PORT_ReadInputDataBit(MDR_PORTE,PORT_Pin_2))
			RegKn |= 4;
		else
			RegKn &= 0xfffb;
		
		if(!PORT_ReadInputDataBit(MDR_PORTE,PORT_Pin_3))
			RegKn |= 8;
		else
			RegKn &= 0xfff7;

		if(!PORT_ReadInputDataBit(MDR_PORTE,PORT_Pin_6))
			RegKn |= 0x10;
		else
			RegKn &= 0xffef;
		
		if(!PORT_ReadInputDataBit(MDR_PORTE,PORT_Pin_7))
			RegKn |= 0x20;
		else
			RegKn &= 0xffdf;
		
		if(!PORT_ReadInputDataBit(MDR_PORTF,PORT_Pin_3))
			RegKn |= 0x40;
		else
			RegKn &= 0xffbf;


		if( RegKnOld == RegKn )
		{
			StatusMU.RegSMU = RegKn;
		}
		else
			RegKnOld = RegKn;
		
		vTaskDelay( 50 );
	}
}
//==================================================================================
void scroll_mess_left(void)
{
	uint8_t digit=0, row=0, tmp_reg = 0;
	
	tmp_reg = led_reg[0][0];
	
	while(digit<18)
	{
		row = 0;
		while(row < 4)
		{
			led_reg[digit][row] = led_reg[digit][row + 1];
			++row;
		}
		
		led_reg[digit][row] = led_reg[digit+1][0];
		
		++digit;
	}
	led_reg[digit][0] = led_reg[digit][1];
	led_reg[digit][1] = led_reg[digit][2];
	led_reg[digit][2] = led_reg[digit][3];
	led_reg[digit][3] = led_reg[digit][4];
	led_reg[digit][4] = tmp_reg;
}
//==================================================================================
void load_led_reg(void)
{
	uint8_t reg = 0, 
			row = 0,
			digit = 0,
			bit8 = 0,
			bit16 = 0;
	
	
	while( row < 5 )
	{
		reg = 0;
		digit = 0;
		while( reg < 7 )
		{
			led_reg[reg][row] = 0;
			
			bit16 = 0;
			while( (bit16 < 16) && (reg < 7))
			{
				while( bit8 < 7 )
				{
					++bit8;	
					//led_reg[reg][row] |= ((uint16_t)((tmp >> bit8)&1)) << bit16;
					led_reg[reg][row] |= ((uint16_t)((font5x7[index_char[digit] + row] >> (8-bit8))&1)) << bit16;
					
					if( bit16<15 )
						++bit16;
					else
					{
						bit16 = 0;
						++reg;
						if(reg < 7)
							led_reg[reg][row] = 0;
					}
				}
				bit8 = 0;
				++digit;
			}
			++reg;
		}
		++row;
	}
}
//==================================================================================
void show_led_data( uint8_t num_par )
{
//	uint8_t cnt_b = 0;
	
//	clear_lcd();
	
	switch(num_par)
	{
		case 0:	//Ig%
			index_char[0] = (uint16_t)66*5;//I
			index_char[1] = (uint16_t)36*5;//г
			index_char[2] = (uint16_t)5*5;//%
			index_char[3] = 0;//
			index_char[4] = (uint16_t)33*5;//A
			//DecSegm(((Status.IUg*77)>>8));
			index_char[5] = (IndData[2]+16)*5;
			index_char[6] = (IndData[3]+16)*5;
			index_char[7] = (IndData[4]+16)*5;
		
			index_char[8] = (uint16_t)35*5;//B
		//	DecSegm((Status.IVg*77)>>8);
			index_char[9] = (IndData[2]+16)*5;
			index_char[10] = (IndData[3]+16)*5;
			index_char[11] = (IndData[4]+16)*5;
		
			index_char[12] = 50*5;//C
		//	DecSegm((Status.IWg*77)>>8);
			index_char[13] = (IndData[2]+16)*5;
			index_char[14] = (IndData[3]+16)*5;
			index_char[15] = (IndData[4]+16)*5;

			break;
		case 1:	//Ig
			index_char[0] = (uint16_t)66*5;//I
			index_char[1] = (uint16_t)36*5;//г
			index_char[2] = 0;//
			index_char[3] = 0;//
			index_char[4] = (uint16_t)33*5;//A
		//	DecSegm(Status.IUg);
			index_char[5] = (IndData[2]+16)*5;
			index_char[6] = (IndData[3]+16)*5;
			index_char[7] = (IndData[4]+16)*5;
		
			index_char[8] = (uint16_t)35*5;//B
		//	DecSegm(Status.IVg);
			index_char[9] = (IndData[2]+16)*5;
			index_char[10] = (IndData[3]+16)*5;
			index_char[11] = (IndData[4]+16)*5;
		
			index_char[12] = (uint16_t)50*5;//C
		//	DecSegm(Status.IWg);
			index_char[13] = (IndData[2]+16)*5;
			index_char[14] = (IndData[3]+16)*5;
			index_char[15] = (IndData[4]+16)*5;

			break;
		case 2:
			//Ug
			index_char[0] = (uint16_t)65*5;//U
			index_char[1] = (uint16_t)36*5;//г
			index_char[2] = 0;//
			index_char[3] = 0;//
			index_char[4] = (uint16_t)33*5;//A
			//DecSegm(Status.UUg);
			index_char[5] = (IndData[2]+16)*5;
			index_char[6] = (IndData[3]+16)*5;
			index_char[7] = (IndData[4]+16)*5;
		
			index_char[8] = (uint16_t)35*5;//B
			//DecSegm(Status.UVg);
			index_char[9] = (IndData[2]+16)*5;
			index_char[10] = (IndData[3]+16)*5;
			index_char[11] = (IndData[4]+16)*5;
		
			index_char[12] = (uint16_t)50*5;//C
			//DecSegm(Status.UWg);
			index_char[13] = (IndData[2]+16)*5;
			index_char[14] = (IndData[3]+16)*5;
			index_char[15] = (IndData[4]+16)*5;
			break;
		case 3:
			//UabF
			index_char[0] = (uint16_t)5*65;//U
			index_char[1] = (uint16_t)5*33;//a
			index_char[2] = (uint16_t)5*34;//b
			index_char[3] = (uint16_t)53*5;//Ф
			index_char[4] = 0;
			//DecSegm(Status.UF);
			index_char[5] = (IndData[2]+16)*5;
			index_char[6] = (IndData[3]+16)*5;
			index_char[7] = (IndData[4]+16)*5;
		
			index_char[8] = 0;
			index_char[9] = 0;
			index_char[10] = 0;
			index_char[11] = 0;
		
			index_char[12] = 0;
			index_char[13] = 0;
			index_char[14] = 0;
			index_char[15] = 0;
			break;
		case 4:
			//If1
			index_char[0] = (uint16_t)66*5;//I
			index_char[1] = (uint16_t)53*5;//Ф
			index_char[2] = (uint16_t)17*5;//1
			index_char[3] = 0;//
			index_char[4] = (uint16_t)33*5;//A
			//DecSegm(Status.IAf1);
			index_char[5] = (IndData[2]+16)*5;
			index_char[6] = (IndData[3]+16)*5;
			index_char[7] = (IndData[4]+16)*5;
		
			index_char[8] = (uint16_t)35*5;//B
		//	DecSegm(Status.IBf1);
			index_char[9] = (IndData[2]+16)*5;
			index_char[10] = (IndData[3]+16)*5;
			index_char[11] = (IndData[4]+16)*5;
		
			index_char[12] = (uint16_t)50*5;//C
		//	DecSegm(Status.ICf1);
			index_char[13] = (IndData[2]+16)*5;
			index_char[14] = (IndData[3]+16)*5;
			index_char[15] = (IndData[4]+16)*5;

			break;
		case 5:
			//If2
			index_char[0] = (uint16_t)66*5;//I
			index_char[1] = (uint16_t)53*5;//Ф
			index_char[2] = (uint16_t)18*5;//2
			index_char[3] = 0;//
			index_char[4] = (uint16_t)33*5;//A
		//	DecSegm(Status.IAf2);
			index_char[5] = (IndData[2]+16)*5;
			index_char[6] = (IndData[3]+16)*5;
			index_char[7] = (IndData[4]+16)*5;
		
			index_char[8] = (uint16_t)35*5;//B
		//	DecSegm(Status.IBf2);
			index_char[9] = (IndData[2]+16)*5;
			index_char[10] = (IndData[3]+16)*5;
			index_char[11] = (IndData[4]+16)*5;
		
			index_char[12] = (uint16_t)50*5;//C
		//	DecSegm(Status.ICf2);
			index_char[13] = (IndData[2]+16)*5;
			index_char[14] = (IndData[3]+16)*5;
			index_char[15] = (IndData[4]+16)*5;
			break;
		case 6:
			//ЧДВ
			index_char[0] = (uint16_t)56*5;//Ч
			index_char[1] = (uint16_t)37*5;//Д
			index_char[2] = (uint16_t)35*5;//В
			index_char[3] = 0;//
		//	DecSegm(Status.NDiz);
			index_char[4] = (IndData[1]+16)*5;
			index_char[5] = (IndData[2]+16)*5;
			index_char[6] = (IndData[3]+16)*5;
			index_char[7] = (IndData[4]+16)*5;
		
			index_char[8] = 0;
			index_char[9] = 0;
			index_char[10] = 0;
			index_char[11] = 0;
		
			index_char[12] = 0;
			index_char[13] = 0;
			index_char[14] = 0;
			index_char[15] = 0;
			break;

		case 7:
			//ИЗЛ
			index_char[0] = (uint16_t)41*5;//И
			index_char[1] = (uint16_t)40*5;//З
			index_char[2] = (uint16_t)44*5;//Л
			index_char[3] = 0;//
		//	DecSegm(Status.ISL);
			index_char[4] = (IndData[2]+16)*5;
			index_char[5] = (IndData[3]+16)*5;
			index_char[6] = (IndData[4]+16)*5;
			index_char[7] = 0;
		
			index_char[8] = 0;
			index_char[9] = 0;
			index_char[10] = 0;
			index_char[11] = 0;
		
			index_char[12] = 0;
			index_char[13] = 0;
			index_char[14] = 0;
			index_char[15] = 0;
			break;
		case 8:
			//ОЖ
			index_char[0] = (uint16_t)47*5;//О
			index_char[1] = (uint16_t)39*5;//Ж
			index_char[2] = 0;//
			index_char[3] = 0;//
		//	DecSegm(Status.TG);
			index_char[4] = 0;//(uint16_t)(IndData[3]+16);
			index_char[5] = (IndData[2]+16)*5;
			index_char[6] = (IndData[3]+16)*5;
			index_char[7] = (IndData[4]+16)*5;
		
			index_char[8] = 0;
			index_char[9] = 0;
			index_char[10] = 0;
			index_char[11] = 0;
		
			index_char[12] = 0;
			index_char[13] = 0;
			index_char[14] = 0;
			index_char[15] = 0;
			break;
		
		default: break;
	}
	
	load_led_reg();
}
//==================================================================================
void DecSegm( uint16_t R0 )
{
 	uint16_t R1=0;

	R1=R0/10000;
	IndData[0]=R1;
	R1=R0%10000;
	R0=R1/1000;
	IndData[1]=R0;
	R0=R1%1000;
	R1=R0/100;
	IndData[2]=R1;
	R1=R0%100;
	R0=R1/10;
	IndData[3]=R0;
	R1=R1%10;
	IndData[4]=R1;	
	
}
//==================================================================================
void OK_PDG(void)
{
	uint8_t cnt_b = 0, i = 0;
	
	while( cnt_b<16 )
	{
		index_char[ cnt_b ] = 0;
		++cnt_b;
	}
	cnt_b = 1;
	
	while( cnt_b < 4 )
	{
		index_char[ cnt_b ] = KDG[ i ];
		++cnt_b;
		++i;
	}

	++cnt_b;
	i = 0;
	while( cnt_b < 7 )
	{
		index_char[cnt_b] = OK[i];
		++cnt_b;
		++i;
	}

	load_led_reg();
}
//==================================================================================
void clear_lcd(void)
{
	uint8_t reg=0, row=0;
	
	while(reg<7)
	{
		row=0;
		while(row<5)
		{
			led_reg[reg][row] = 0;
			++row;
		}
		++reg;
	}
}
//==================================================================================
void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
	( void ) pcTaskName;
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	printf("%c[1;1f%c[J", 27, 27); //ClearScreen
	printf("Stack over"); //
	for( ;; );
}	

//==================================================================================
void err_KDG(void)
{
	uint8_t cnt_b=0, i = 0;
	
	while(cnt_b<16)
	{
		index_char[cnt_b] = 0;
		++cnt_b;
	}
	
	cnt_b=1;
	while(cnt_b<6)
	{
		index_char[cnt_b] = OTKAZ[i];
		++cnt_b;
		++i;
	}

	cnt_b=10;
	i = 0;
	while(cnt_b<13)
	{
		index_char[cnt_b] = KDG[i];
		++cnt_b;
		++i;
	}

	load_led_reg();
}
//==================================================================================
void UART1_send_byte(uint8_t byte)
{
	UART_SendData(MDR_UART1,byte);
	//time_out_byte=0;
	//while(!UART_GetFlagStatus (MDR_UART1,UART_FLAG_RXFF))
	//while(UART_GetFlagStatus (MDR_UART1,UART_FLAG_BUSY) || !UART_GetFlagStatus (MDR_UART1,UART_FLAG_RXFF))
	//while(UART_GetFlagStatus (MDR_UART1, UART_FLAG_BUSY))
	while(UART_GetFlagStatus (MDR_UART1, UART_FLAG_TXFF))
	{
	}
	UART_ReceiveData (MDR_UART1);
	UART_ClearITPendingBit(MDR_UART1,UART_IT_RX);
}

//==================================================================================
bool read_rx_data(void)
{
	uint8_t cnt_byte = 0, sum = 0;
			
	while( cnt_byte < PDG_FRAME_SIZE )
	{
		sum += DataUsart.ArrayRX[cnt_byte];
		++cnt_byte;
	}
	sum += 0xAA;
	
//	DataUsart.tail -= PDG_FRAME_SIZE;
//	DataUsart.count -= PDG_FRAME_SIZE;
	
	if(!sum)
	{
//		StatusDG.Ndiz=ArrayRX[0];
//		StatusDG.FreqU=ArrayRX[1];
//		StatusDG.UDG=(ArrayRX[3]<<8)|ArrayRX[2];
//		StatusDG.UBS = ArrayRX[3];
//		StatusDG.Igen;
//		StatusDG.DM;
//		StatusDG.TM;
//		StatusDG.TBap;
//		StatusDG.LvlDIZ;
//		StatusDG.RegWrk;
//		StatusDG.Isol;
//		StatusDG.Led;
//		StatusDG.RegSDG;
//		StatusDG.Error;
//		StatusDG.RegimTime;
//		StatusDG.RegimError;

//		if( !ver )
//		{
//			ver = true;
//			show_ver();
//			delay_ms(1500);
//			Segment[0] = 0;
//			Segment[1] = 0;
//			Segment[2] = 0;
//			Segment[3] = 0;
//			Segment[4] = 0;
//		}
	}
	else
		return false;
	
	return true;
}
//==================================================================================


//==================================================================================


//==================================================================================



//==================================================================================


